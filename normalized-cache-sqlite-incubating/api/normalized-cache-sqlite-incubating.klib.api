// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, macosArm64, macosX64, tvosArm64, tvosSimulatorArm64, tvosX64, watchosArm32, watchosArm64, watchosSimulatorArm64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <com.apollographql.cache:normalized-cache-sqlite-incubating>
abstract interface com.apollographql.cache.normalized.sql.internal.fields/FieldsDatabase : app.cash.sqldelight/Transacter { // com.apollographql.cache.normalized.sql.internal.fields/FieldsDatabase|null[0]
    abstract val fieldsQueries // com.apollographql.cache.normalized.sql.internal.fields/FieldsDatabase.fieldsQueries|{}fieldsQueries[0]
        abstract fun <get-fieldsQueries>(): com.apollographql.cache.normalized.sql.internal.fields/FieldsQueries // com.apollographql.cache.normalized.sql.internal.fields/FieldsDatabase.fieldsQueries.<get-fieldsQueries>|<get-fieldsQueries>(){}[0]

    final object Companion { // com.apollographql.cache.normalized.sql.internal.fields/FieldsDatabase.Companion|null[0]
        final val Schema // com.apollographql.cache.normalized.sql.internal.fields/FieldsDatabase.Companion.Schema|{}Schema[0]
            final fun <get-Schema>(): app.cash.sqldelight.db/SqlSchema<app.cash.sqldelight.db/QueryResult.Value<kotlin/Unit>> // com.apollographql.cache.normalized.sql.internal.fields/FieldsDatabase.Companion.Schema.<get-Schema>|<get-Schema>(){}[0]

        final fun invoke(app.cash.sqldelight.db/SqlDriver): com.apollographql.cache.normalized.sql.internal.fields/FieldsDatabase // com.apollographql.cache.normalized.sql.internal.fields/FieldsDatabase.Companion.invoke|invoke(app.cash.sqldelight.db.SqlDriver){}[0]
    }
}

final class com.apollographql.cache.normalized.sql.internal.fields/Field_ { // com.apollographql.cache.normalized.sql.internal.fields/Field_|null[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/ByteArray?, kotlin/ByteArray?, kotlin/Long?, kotlin/Long?) // com.apollographql.cache.normalized.sql.internal.fields/Field_.<init>|<init>(kotlin.String;kotlin.String;kotlin.ByteArray?;kotlin.ByteArray?;kotlin.Long?;kotlin.Long?){}[0]

    final val expiration_date // com.apollographql.cache.normalized.sql.internal.fields/Field_.expiration_date|{}expiration_date[0]
        final fun <get-expiration_date>(): kotlin/Long? // com.apollographql.cache.normalized.sql.internal.fields/Field_.expiration_date.<get-expiration_date>|<get-expiration_date>(){}[0]
    final val field_ // com.apollographql.cache.normalized.sql.internal.fields/Field_.field_|{}field_[0]
        final fun <get-field_>(): kotlin/String // com.apollographql.cache.normalized.sql.internal.fields/Field_.field_.<get-field_>|<get-field_>(){}[0]
    final val metadata // com.apollographql.cache.normalized.sql.internal.fields/Field_.metadata|{}metadata[0]
        final fun <get-metadata>(): kotlin/ByteArray? // com.apollographql.cache.normalized.sql.internal.fields/Field_.metadata.<get-metadata>|<get-metadata>(){}[0]
    final val received_date // com.apollographql.cache.normalized.sql.internal.fields/Field_.received_date|{}received_date[0]
        final fun <get-received_date>(): kotlin/Long? // com.apollographql.cache.normalized.sql.internal.fields/Field_.received_date.<get-received_date>|<get-received_date>(){}[0]
    final val record // com.apollographql.cache.normalized.sql.internal.fields/Field_.record|{}record[0]
        final fun <get-record>(): kotlin/String // com.apollographql.cache.normalized.sql.internal.fields/Field_.record.<get-record>|<get-record>(){}[0]
    final val value_ // com.apollographql.cache.normalized.sql.internal.fields/Field_.value_|{}value_[0]
        final fun <get-value_>(): kotlin/ByteArray? // com.apollographql.cache.normalized.sql.internal.fields/Field_.value_.<get-value_>|<get-value_>(){}[0]

    final fun component1(): kotlin/String // com.apollographql.cache.normalized.sql.internal.fields/Field_.component1|component1(){}[0]
    final fun component2(): kotlin/String // com.apollographql.cache.normalized.sql.internal.fields/Field_.component2|component2(){}[0]
    final fun component3(): kotlin/ByteArray? // com.apollographql.cache.normalized.sql.internal.fields/Field_.component3|component3(){}[0]
    final fun component4(): kotlin/ByteArray? // com.apollographql.cache.normalized.sql.internal.fields/Field_.component4|component4(){}[0]
    final fun component5(): kotlin/Long? // com.apollographql.cache.normalized.sql.internal.fields/Field_.component5|component5(){}[0]
    final fun component6(): kotlin/Long? // com.apollographql.cache.normalized.sql.internal.fields/Field_.component6|component6(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/ByteArray? = ..., kotlin/ByteArray? = ..., kotlin/Long? = ..., kotlin/Long? = ...): com.apollographql.cache.normalized.sql.internal.fields/Field_ // com.apollographql.cache.normalized.sql.internal.fields/Field_.copy|copy(kotlin.String;kotlin.String;kotlin.ByteArray?;kotlin.ByteArray?;kotlin.Long?;kotlin.Long?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.cache.normalized.sql.internal.fields/Field_.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.apollographql.cache.normalized.sql.internal.fields/Field_.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.apollographql.cache.normalized.sql.internal.fields/Field_.toString|toString(){}[0]
}

final class com.apollographql.cache.normalized.sql.internal.fields/FieldsQueries : app.cash.sqldelight/TransacterImpl { // com.apollographql.cache.normalized.sql.internal.fields/FieldsQueries|null[0]
    constructor <init>(app.cash.sqldelight.db/SqlDriver) // com.apollographql.cache.normalized.sql.internal.fields/FieldsQueries.<init>|<init>(app.cash.sqldelight.db.SqlDriver){}[0]

    final fun <#A1: kotlin/Any> selectAllRecords(kotlin/Function6<kotlin/String, kotlin/String, kotlin/ByteArray?, kotlin/ByteArray?, kotlin/Long?, kotlin/Long?, #A1>): app.cash.sqldelight/Query<#A1> // com.apollographql.cache.normalized.sql.internal.fields/FieldsQueries.selectAllRecords|selectAllRecords(kotlin.Function6<kotlin.String,kotlin.String,kotlin.ByteArray?,kotlin.ByteArray?,kotlin.Long?,kotlin.Long?,0:0>){0ยง<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> selectRecords(kotlin.collections/Collection<kotlin/String>, kotlin/Function6<kotlin/String, kotlin/String, kotlin/ByteArray?, kotlin/ByteArray?, kotlin/Long?, kotlin/Long?, #A1>): app.cash.sqldelight/Query<#A1> // com.apollographql.cache.normalized.sql.internal.fields/FieldsQueries.selectRecords|selectRecords(kotlin.collections.Collection<kotlin.String>;kotlin.Function6<kotlin.String,kotlin.String,kotlin.ByteArray?,kotlin.ByteArray?,kotlin.Long?,kotlin.Long?,0:0>){0ยง<kotlin.Any>}[0]
    final fun changes(): app.cash.sqldelight/ExecutableQuery<kotlin/Long> // com.apollographql.cache.normalized.sql.internal.fields/FieldsQueries.changes|changes(){}[0]
    final fun count(): app.cash.sqldelight/Query<kotlin/Long> // com.apollographql.cache.normalized.sql.internal.fields/FieldsQueries.count|count(){}[0]
    final fun deleteAllRecords() // com.apollographql.cache.normalized.sql.internal.fields/FieldsQueries.deleteAllRecords|deleteAllRecords(){}[0]
    final fun deleteRecords(kotlin.collections/Collection<kotlin/String>) // com.apollographql.cache.normalized.sql.internal.fields/FieldsQueries.deleteRecords|deleteRecords(kotlin.collections.Collection<kotlin.String>){}[0]
    final fun deleteRecordsMatching(kotlin/String) // com.apollographql.cache.normalized.sql.internal.fields/FieldsQueries.deleteRecordsMatching|deleteRecordsMatching(kotlin.String){}[0]
    final fun insertOrUpdateField(kotlin/String, kotlin/String, kotlin/ByteArray?, kotlin/ByteArray?, kotlin/Long?, kotlin/Long?) // com.apollographql.cache.normalized.sql.internal.fields/FieldsQueries.insertOrUpdateField|insertOrUpdateField(kotlin.String;kotlin.String;kotlin.ByteArray?;kotlin.ByteArray?;kotlin.Long?;kotlin.Long?){}[0]
    final fun selectAllRecords(): app.cash.sqldelight/Query<com.apollographql.cache.normalized.sql.internal.fields/Field_> // com.apollographql.cache.normalized.sql.internal.fields/FieldsQueries.selectAllRecords|selectAllRecords(){}[0]
    final fun selectRecords(kotlin.collections/Collection<kotlin/String>): app.cash.sqldelight/Query<com.apollographql.cache.normalized.sql.internal.fields/Field_> // com.apollographql.cache.normalized.sql.internal.fields/FieldsQueries.selectRecords|selectRecords(kotlin.collections.Collection<kotlin.String>){}[0]
    final fun trimByReceivedDate(kotlin/Long) // com.apollographql.cache.normalized.sql.internal.fields/FieldsQueries.trimByReceivedDate|trimByReceivedDate(kotlin.Long){}[0]
}

final class com.apollographql.cache.normalized.sql/SqlNormalizedCache : com.apollographql.cache.normalized.api/NormalizedCache { // com.apollographql.cache.normalized.sql/SqlNormalizedCache|null[0]
    final fun clearAll() // com.apollographql.cache.normalized.sql/SqlNormalizedCache.clearAll|clearAll(){}[0]
    final fun dump(): kotlin.collections/Map<kotlin.reflect/KClass<*>, kotlin.collections/Map<kotlin/String, com.apollographql.cache.normalized.api/Record>> // com.apollographql.cache.normalized.sql/SqlNormalizedCache.dump|dump(){}[0]
    final fun loadRecord(kotlin/String, com.apollographql.cache.normalized.api/CacheHeaders): com.apollographql.cache.normalized.api/Record? // com.apollographql.cache.normalized.sql/SqlNormalizedCache.loadRecord|loadRecord(kotlin.String;com.apollographql.cache.normalized.api.CacheHeaders){}[0]
    final fun loadRecords(kotlin.collections/Collection<kotlin/String>, com.apollographql.cache.normalized.api/CacheHeaders): kotlin.collections/Collection<com.apollographql.cache.normalized.api/Record> // com.apollographql.cache.normalized.sql/SqlNormalizedCache.loadRecords|loadRecords(kotlin.collections.Collection<kotlin.String>;com.apollographql.cache.normalized.api.CacheHeaders){}[0]
    final fun loadRecords(kotlin.collections/Map<kotlin/String, kotlin.collections/Set<kotlin/String>>, com.apollographql.cache.normalized.api/CacheHeaders): kotlin.collections/Collection<com.apollographql.cache.normalized.api/Record> // com.apollographql.cache.normalized.sql/SqlNormalizedCache.loadRecords|loadRecords(kotlin.collections.Map<kotlin.String,kotlin.collections.Set<kotlin.String>>;com.apollographql.cache.normalized.api.CacheHeaders){}[0]
    final fun merge(com.apollographql.cache.normalized.api/Record, com.apollographql.cache.normalized.api/CacheHeaders, com.apollographql.cache.normalized.api/RecordMerger): kotlin.collections/Set<kotlin/String> // com.apollographql.cache.normalized.sql/SqlNormalizedCache.merge|merge(com.apollographql.cache.normalized.api.Record;com.apollographql.cache.normalized.api.CacheHeaders;com.apollographql.cache.normalized.api.RecordMerger){}[0]
    final fun merge(kotlin.collections/Collection<com.apollographql.cache.normalized.api/Record>, com.apollographql.cache.normalized.api/CacheHeaders, com.apollographql.cache.normalized.api/RecordMerger): kotlin.collections/Set<kotlin/String> // com.apollographql.cache.normalized.sql/SqlNormalizedCache.merge|merge(kotlin.collections.Collection<com.apollographql.cache.normalized.api.Record>;com.apollographql.cache.normalized.api.CacheHeaders;com.apollographql.cache.normalized.api.RecordMerger){}[0]
    final fun remove(com.apollographql.cache.normalized.api/CacheKey, kotlin/Boolean): kotlin/Boolean // com.apollographql.cache.normalized.sql/SqlNormalizedCache.remove|remove(com.apollographql.cache.normalized.api.CacheKey;kotlin.Boolean){}[0]
    final fun remove(kotlin.collections/Collection<com.apollographql.cache.normalized.api/CacheKey>, kotlin/Boolean): kotlin/Int // com.apollographql.cache.normalized.sql/SqlNormalizedCache.remove|remove(kotlin.collections.Collection<com.apollographql.cache.normalized.api.CacheKey>;kotlin.Boolean){}[0]
    final fun remove(kotlin/String): kotlin/Int // com.apollographql.cache.normalized.sql/SqlNormalizedCache.remove|remove(kotlin.String){}[0]
    final fun trim(kotlin/Long, kotlin/Float): kotlin/Long // com.apollographql.cache.normalized.sql/SqlNormalizedCache.trim|trim(kotlin.Long;kotlin.Float){}[0]
}

final const val com.apollographql.cache.normalized.sql/VERSION // com.apollographql.cache.normalized.sql/VERSION|{}VERSION[0]
    final fun <get-VERSION>(): kotlin/String // com.apollographql.cache.normalized.sql/VERSION.<get-VERSION>|<get-VERSION>(){}[0]

final fun com.apollographql.cache.normalized.sql/SqlNormalizedCacheFactory(app.cash.sqldelight.db/SqlDriver): com.apollographql.cache.normalized.api/NormalizedCacheFactory // com.apollographql.cache.normalized.sql/SqlNormalizedCacheFactory|SqlNormalizedCacheFactory(app.cash.sqldelight.db.SqlDriver){}[0]
final fun com.apollographql.cache.normalized.sql/SqlNormalizedCacheFactory(kotlin/String? = ...): com.apollographql.cache.normalized.api/NormalizedCacheFactory // com.apollographql.cache.normalized.sql/SqlNormalizedCacheFactory|SqlNormalizedCacheFactory(kotlin.String?){}[0]
final fun com.apollographql.cache.normalized.sql/SqlNormalizedCacheFactory(kotlin/String?, kotlin/String?): com.apollographql.cache.normalized.api/NormalizedCacheFactory // com.apollographql.cache.normalized.sql/SqlNormalizedCacheFactory|SqlNormalizedCacheFactory(kotlin.String?;kotlin.String?){}[0]
