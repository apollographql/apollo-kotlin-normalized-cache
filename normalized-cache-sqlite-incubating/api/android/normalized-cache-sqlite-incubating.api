public final class com/apollographql/cache/normalized/sql/ApolloInitializer : androidx/startup/Initializer {
	public static final field Companion Lcom/apollographql/cache/normalized/sql/ApolloInitializer$Companion;
	public fun <init> ()V
	public synthetic fun create (Landroid/content/Context;)Ljava/lang/Object;
	public fun create (Landroid/content/Context;)V
	public fun dependencies ()Ljava/util/List;
}

public final class com/apollographql/cache/normalized/sql/ApolloInitializer$Companion {
}

public final class com/apollographql/cache/normalized/sql/SqlNormalizedCache : com/apollographql/cache/normalized/api/NormalizedCache {
	public fun clearAll ()V
	public fun dump ()Ljava/util/Map;
	public fun loadRecord (Ljava/lang/String;Lcom/apollographql/cache/normalized/api/CacheHeaders;)Lcom/apollographql/cache/normalized/api/Record;
	public fun loadRecords (Ljava/util/Collection;Lcom/apollographql/cache/normalized/api/CacheHeaders;)Ljava/util/Collection;
	public fun merge (Lcom/apollographql/cache/normalized/api/Record;Lcom/apollographql/cache/normalized/api/CacheHeaders;Lcom/apollographql/cache/normalized/api/RecordMerger;)Ljava/util/Set;
	public fun merge (Ljava/util/Collection;Lcom/apollographql/cache/normalized/api/CacheHeaders;Lcom/apollographql/cache/normalized/api/RecordMerger;)Ljava/util/Set;
	public fun remove (Lcom/apollographql/cache/normalized/api/CacheKey;Z)Z
	public fun remove (Ljava/lang/String;)I
}

public final class com/apollographql/cache/normalized/sql/SqlNormalizedCacheFactory : com/apollographql/cache/normalized/api/NormalizedCacheFactory {
	public fun <init> (Landroid/content/Context;)V
	public fun <init> (Landroid/content/Context;Ljava/lang/String;)V
	public fun <init> (Landroid/content/Context;Ljava/lang/String;Landroidx/sqlite/db/SupportSQLiteOpenHelper$Factory;)V
	public fun <init> (Landroid/content/Context;Ljava/lang/String;Landroidx/sqlite/db/SupportSQLiteOpenHelper$Factory;Lkotlin/jvm/functions/Function1;)V
	public fun <init> (Landroid/content/Context;Ljava/lang/String;Landroidx/sqlite/db/SupportSQLiteOpenHelper$Factory;Lkotlin/jvm/functions/Function1;Z)V
	public fun <init> (Landroid/content/Context;Ljava/lang/String;Landroidx/sqlite/db/SupportSQLiteOpenHelper$Factory;Lkotlin/jvm/functions/Function1;ZLjava/lang/Long;)V
	public fun <init> (Landroid/content/Context;Ljava/lang/String;Landroidx/sqlite/db/SupportSQLiteOpenHelper$Factory;Lkotlin/jvm/functions/Function1;ZLjava/lang/Long;Z)V
	public synthetic fun <init> (Landroid/content/Context;Ljava/lang/String;Landroidx/sqlite/db/SupportSQLiteOpenHelper$Factory;Lkotlin/jvm/functions/Function1;ZLjava/lang/Long;ZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun <init> (Lapp/cash/sqldelight/db/SqlDriver;Z)V
	public synthetic fun <init> (Lapp/cash/sqldelight/db/SqlDriver;ZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun <init> (Ljava/lang/String;Z)V
	public synthetic fun <init> (Ljava/lang/String;ZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun create ()Lcom/apollographql/cache/normalized/api/NormalizedCache;
}

public final class com/apollographql/cache/normalized/sql/VersionKt {
	public static final field VERSION Ljava/lang/String;
}

public abstract interface class com/apollographql/cache/normalized/sql/internal/blob/BlobDatabase : app/cash/sqldelight/Transacter {
	public static final field Companion Lcom/apollographql/cache/normalized/sql/internal/blob/BlobDatabase$Companion;
	public abstract fun getBlobQueries ()Lcom/apollographql/cache/normalized/sql/internal/blob/BlobQueries;
}

public final class com/apollographql/cache/normalized/sql/internal/blob/BlobDatabase$Companion {
	public final fun getSchema ()Lapp/cash/sqldelight/db/SqlSchema;
	public final fun invoke (Lapp/cash/sqldelight/db/SqlDriver;)Lcom/apollographql/cache/normalized/sql/internal/blob/BlobDatabase;
}

public final class com/apollographql/cache/normalized/sql/internal/blob/BlobQueries : app/cash/sqldelight/TransacterImpl {
	public fun <init> (Lapp/cash/sqldelight/db/SqlDriver;)V
	public final fun changes ()Lapp/cash/sqldelight/ExecutableQuery;
	public final fun delete (Ljava/lang/String;)V
	public final fun deleteAll ()V
	public final fun deleteRecords (Ljava/util/Collection;)V
	public final fun deleteRecordsWithKeyMatching (Ljava/lang/String;Ljava/lang/String;)V
	public final fun insert (Ljava/lang/String;[B)V
	public final fun recordForKey (Ljava/lang/String;)Lapp/cash/sqldelight/Query;
	public final fun recordForKey (Ljava/lang/String;Lkotlin/jvm/functions/Function2;)Lapp/cash/sqldelight/Query;
	public final fun recordsForKeys (Ljava/util/Collection;)Lapp/cash/sqldelight/Query;
	public final fun recordsForKeys (Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Lapp/cash/sqldelight/Query;
	public final fun selectRecords ()Lapp/cash/sqldelight/Query;
	public final fun selectRecords (Lkotlin/jvm/functions/Function2;)Lapp/cash/sqldelight/Query;
	public final fun update ([BLjava/lang/String;)V
}

public final class com/apollographql/cache/normalized/sql/internal/blob/Blobs {
	public fun <init> (Ljava/lang/String;[B)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()[B
	public final fun copy (Ljava/lang/String;[B)Lcom/apollographql/cache/normalized/sql/internal/blob/Blobs;
	public static synthetic fun copy$default (Lcom/apollographql/cache/normalized/sql/internal/blob/Blobs;Ljava/lang/String;[BILjava/lang/Object;)Lcom/apollographql/cache/normalized/sql/internal/blob/Blobs;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getBlob ()[B
	public final fun getKey ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class com/apollographql/cache/normalized/sql/internal/blob2/Blob2Database : app/cash/sqldelight/Transacter {
	public static final field Companion Lcom/apollographql/cache/normalized/sql/internal/blob2/Blob2Database$Companion;
	public abstract fun getBlob2Queries ()Lcom/apollographql/cache/normalized/sql/internal/blob2/Blob2Queries;
}

public final class com/apollographql/cache/normalized/sql/internal/blob2/Blob2Database$Companion {
	public final fun getSchema ()Lapp/cash/sqldelight/db/SqlSchema;
	public final fun invoke (Lapp/cash/sqldelight/db/SqlDriver;)Lcom/apollographql/cache/normalized/sql/internal/blob2/Blob2Database;
}

public final class com/apollographql/cache/normalized/sql/internal/blob2/Blob2Queries : app/cash/sqldelight/TransacterImpl {
	public fun <init> (Lapp/cash/sqldelight/db/SqlDriver;)V
	public final fun changes ()Lapp/cash/sqldelight/ExecutableQuery;
	public final fun count ()Lapp/cash/sqldelight/Query;
	public final fun delete (Ljava/lang/String;)V
	public final fun deleteAll ()V
	public final fun deleteRecords (Ljava/util/Collection;)V
	public final fun deleteRecordsWithKeyMatching (Ljava/lang/String;Ljava/lang/String;)V
	public final fun insert (Ljava/lang/String;[BLjava/lang/Long;)V
	public final fun recordForKey (Ljava/lang/String;)Lapp/cash/sqldelight/Query;
	public final fun recordForKey (Ljava/lang/String;Lkotlin/jvm/functions/Function2;)Lapp/cash/sqldelight/Query;
	public final fun recordsForKeys (Ljava/util/Collection;)Lapp/cash/sqldelight/Query;
	public final fun recordsForKeys (Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Lapp/cash/sqldelight/Query;
	public final fun selectRecords ()Lapp/cash/sqldelight/Query;
	public final fun selectRecords (Lkotlin/jvm/functions/Function3;)Lapp/cash/sqldelight/Query;
	public final fun trim (J)V
	public final fun update ([BLjava/lang/Long;Ljava/lang/String;)V
}

public final class com/apollographql/cache/normalized/sql/internal/blob2/Blobs {
	public fun <init> (Ljava/lang/String;[BLjava/lang/Long;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()[B
	public final fun component3 ()Ljava/lang/Long;
	public final fun copy (Ljava/lang/String;[BLjava/lang/Long;)Lcom/apollographql/cache/normalized/sql/internal/blob2/Blobs;
	public static synthetic fun copy$default (Lcom/apollographql/cache/normalized/sql/internal/blob2/Blobs;Ljava/lang/String;[BLjava/lang/Long;ILjava/lang/Object;)Lcom/apollographql/cache/normalized/sql/internal/blob2/Blobs;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getBlob ()[B
	public final fun getDate ()Ljava/lang/Long;
	public final fun getKey ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class com/apollographql/cache/normalized/sql/internal/blob2/RecordForKey {
	public fun <init> (Ljava/lang/String;[B)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()[B
	public final fun copy (Ljava/lang/String;[B)Lcom/apollographql/cache/normalized/sql/internal/blob2/RecordForKey;
	public static synthetic fun copy$default (Lcom/apollographql/cache/normalized/sql/internal/blob2/RecordForKey;Ljava/lang/String;[BILjava/lang/Object;)Lcom/apollographql/cache/normalized/sql/internal/blob2/RecordForKey;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getBlob ()[B
	public final fun getKey ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class com/apollographql/cache/normalized/sql/internal/blob2/RecordsForKeys {
	public fun <init> (Ljava/lang/String;[B)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()[B
	public final fun copy (Ljava/lang/String;[B)Lcom/apollographql/cache/normalized/sql/internal/blob2/RecordsForKeys;
	public static synthetic fun copy$default (Lcom/apollographql/cache/normalized/sql/internal/blob2/RecordsForKeys;Ljava/lang/String;[BILjava/lang/Object;)Lcom/apollographql/cache/normalized/sql/internal/blob2/RecordsForKeys;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getBlob ()[B
	public final fun getKey ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class com/apollographql/cache/normalized/sql/internal/json/JsonDatabase : app/cash/sqldelight/Transacter {
	public static final field Companion Lcom/apollographql/cache/normalized/sql/internal/json/JsonDatabase$Companion;
	public abstract fun getJsonQueries ()Lcom/apollographql/cache/normalized/sql/internal/json/JsonQueries;
}

public final class com/apollographql/cache/normalized/sql/internal/json/JsonDatabase$Companion {
	public final fun getSchema ()Lapp/cash/sqldelight/db/SqlSchema;
	public final fun invoke (Lapp/cash/sqldelight/db/SqlDriver;)Lcom/apollographql/cache/normalized/sql/internal/json/JsonDatabase;
}

public final class com/apollographql/cache/normalized/sql/internal/json/JsonQueries : app/cash/sqldelight/TransacterImpl {
	public fun <init> (Lapp/cash/sqldelight/db/SqlDriver;)V
	public final fun changes ()Lapp/cash/sqldelight/ExecutableQuery;
	public final fun delete (Ljava/lang/String;)V
	public final fun deleteAll ()V
	public final fun deleteRecords (Ljava/util/Collection;)V
	public final fun deleteRecordsWithKeyMatching (Ljava/lang/String;Ljava/lang/String;)V
	public final fun insert (Ljava/lang/String;Ljava/lang/String;)V
	public final fun recordForKey (Ljava/lang/String;)Lapp/cash/sqldelight/Query;
	public final fun recordForKey (Ljava/lang/String;Lkotlin/jvm/functions/Function2;)Lapp/cash/sqldelight/Query;
	public final fun recordsForKeys (Ljava/util/Collection;)Lapp/cash/sqldelight/Query;
	public final fun recordsForKeys (Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Lapp/cash/sqldelight/Query;
	public final fun selectRecords ()Lapp/cash/sqldelight/Query;
	public final fun selectRecords (Lkotlin/jvm/functions/Function3;)Lapp/cash/sqldelight/Query;
	public final fun update (Ljava/lang/String;Ljava/lang/String;)V
}

public final class com/apollographql/cache/normalized/sql/internal/json/RecordForKey {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;Ljava/lang/String;)Lcom/apollographql/cache/normalized/sql/internal/json/RecordForKey;
	public static synthetic fun copy$default (Lcom/apollographql/cache/normalized/sql/internal/json/RecordForKey;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Lcom/apollographql/cache/normalized/sql/internal/json/RecordForKey;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getKey ()Ljava/lang/String;
	public final fun getRecord ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class com/apollographql/cache/normalized/sql/internal/json/Records {
	public fun <init> (JLjava/lang/String;Ljava/lang/String;)V
	public final fun component1 ()J
	public final fun component2 ()Ljava/lang/String;
	public final fun component3 ()Ljava/lang/String;
	public final fun copy (JLjava/lang/String;Ljava/lang/String;)Lcom/apollographql/cache/normalized/sql/internal/json/Records;
	public static synthetic fun copy$default (Lcom/apollographql/cache/normalized/sql/internal/json/Records;JLjava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Lcom/apollographql/cache/normalized/sql/internal/json/Records;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getKey ()Ljava/lang/String;
	public final fun getRecord ()Ljava/lang/String;
	public final fun get_id ()J
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class com/apollographql/cache/normalized/sql/internal/json/RecordsForKeys {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;Ljava/lang/String;)Lcom/apollographql/cache/normalized/sql/internal/json/RecordsForKeys;
	public static synthetic fun copy$default (Lcom/apollographql/cache/normalized/sql/internal/json/RecordsForKeys;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Lcom/apollographql/cache/normalized/sql/internal/json/RecordsForKeys;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getKey ()Ljava/lang/String;
	public final fun getRecord ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

