// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, js, macosArm64, macosX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, watchosArm32, watchosArm64, watchosSimulatorArm64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <com.apollographql.cache.normalized:normalized-cache-api-incubating>
abstract class com.apollographql.cache.normalized.api/CacheKeyApolloResolver : com.apollographql.cache.normalized.api/ApolloResolver { // com.apollographql.cache.normalized.api/CacheKeyApolloResolver|null[0]
    abstract fun cacheKeyForField(com.apollographql.cache.normalized.api/ResolverContext): com.apollographql.cache.normalized.api/CacheKey? // com.apollographql.cache.normalized.api/CacheKeyApolloResolver.cacheKeyForField|cacheKeyForField(com.apollographql.cache.normalized.api.ResolverContext){}[0]
    constructor <init>() // com.apollographql.cache.normalized.api/CacheKeyApolloResolver.<init>|<init>(){}[0]
    final fun resolveField(com.apollographql.cache.normalized.api/ResolverContext): kotlin/Any? // com.apollographql.cache.normalized.api/CacheKeyApolloResolver.resolveField|resolveField(com.apollographql.cache.normalized.api.ResolverContext){}[0]
    open fun listOfCacheKeysForField(com.apollographql.cache.normalized.api/ResolverContext): kotlin.collections/List<com.apollographql.cache.normalized.api/CacheKey?>? // com.apollographql.cache.normalized.api/CacheKeyApolloResolver.listOfCacheKeysForField|listOfCacheKeysForField(com.apollographql.cache.normalized.api.ResolverContext){}[0]
}
abstract class com.apollographql.cache.normalized.api/CacheKeyResolver : com.apollographql.cache.normalized.api/CacheResolver { // com.apollographql.cache.normalized.api/CacheKeyResolver|null[0]
    abstract fun cacheKeyForField(com.apollographql.apollo3.api/CompiledField, com.apollographql.apollo3.api/Executable.Variables): com.apollographql.cache.normalized.api/CacheKey? // com.apollographql.cache.normalized.api/CacheKeyResolver.cacheKeyForField|cacheKeyForField(com.apollographql.apollo3.api.CompiledField;com.apollographql.apollo3.api.Executable.Variables){}[0]
    constructor <init>() // com.apollographql.cache.normalized.api/CacheKeyResolver.<init>|<init>(){}[0]
    final fun resolveField(com.apollographql.apollo3.api/CompiledField, com.apollographql.apollo3.api/Executable.Variables, kotlin.collections/Map<kotlin/String, kotlin/Any?>, kotlin/String): kotlin/Any? // com.apollographql.cache.normalized.api/CacheKeyResolver.resolveField|resolveField(com.apollographql.apollo3.api.CompiledField;com.apollographql.apollo3.api.Executable.Variables;kotlin.collections.Map<kotlin.String,kotlin.Any?>;kotlin.String){}[0]
    open fun listOfCacheKeysForField(com.apollographql.apollo3.api/CompiledField, com.apollographql.apollo3.api/Executable.Variables): kotlin.collections/List<com.apollographql.cache.normalized.api/CacheKey?>? // com.apollographql.cache.normalized.api/CacheKeyResolver.listOfCacheKeysForField|listOfCacheKeysForField(com.apollographql.apollo3.api.CompiledField;com.apollographql.apollo3.api.Executable.Variables){}[0]
}
abstract class com.apollographql.cache.normalized.api/NormalizedCacheFactory { // com.apollographql.cache.normalized.api/NormalizedCacheFactory|null[0]
    abstract fun create(): com.apollographql.cache.normalized.api/NormalizedCache // com.apollographql.cache.normalized.api/NormalizedCacheFactory.create|create(){}[0]
    constructor <init>() // com.apollographql.cache.normalized.api/NormalizedCacheFactory.<init>|<init>(){}[0]
}
abstract interface <#A: kotlin/Any, #B: kotlin/Any> com.apollographql.cache.normalized.api.internal.store/Cache { // com.apollographql.cache.normalized.api.internal.store/Cache|null[0]
    abstract fun getAllPresent(): kotlin.collections/Map<#A, #B> // com.apollographql.cache.normalized.api.internal.store/Cache.getAllPresent|getAllPresent(){}[0]
    abstract fun getAllPresent(kotlin.collections/List<*>): kotlin.collections/Map<#A, #B> // com.apollographql.cache.normalized.api.internal.store/Cache.getAllPresent|getAllPresent(kotlin.collections.List<*>){}[0]
    abstract fun getIfPresent(#A): #B? // com.apollographql.cache.normalized.api.internal.store/Cache.getIfPresent|getIfPresent(1:0){}[0]
    abstract fun getOrPut(#A, kotlin/Function0<#B>): #B // com.apollographql.cache.normalized.api.internal.store/Cache.getOrPut|getOrPut(1:0;kotlin.Function0<1:1>){}[0]
    abstract fun invalidate(#A) // com.apollographql.cache.normalized.api.internal.store/Cache.invalidate|invalidate(1:0){}[0]
    abstract fun invalidateAll() // com.apollographql.cache.normalized.api.internal.store/Cache.invalidateAll|invalidateAll(){}[0]
    abstract fun invalidateAll(kotlin.collections/List<#A>) // com.apollographql.cache.normalized.api.internal.store/Cache.invalidateAll|invalidateAll(kotlin.collections.List<1:0>){}[0]
    abstract fun put(#A, #B) // com.apollographql.cache.normalized.api.internal.store/Cache.put|put(1:0;1:1){}[0]
    abstract fun putAll(kotlin.collections/Map<#A, #B>) // com.apollographql.cache.normalized.api.internal.store/Cache.putAll|putAll(kotlin.collections.Map<1:0,1:1>){}[0]
    abstract fun size(): kotlin/Long // com.apollographql.cache.normalized.api.internal.store/Cache.size|size(){}[0]
}
abstract interface com.apollographql.cache.normalized.api/ApolloResolver { // com.apollographql.cache.normalized.api/ApolloResolver|null[0]
    abstract fun resolveField(com.apollographql.cache.normalized.api/ResolverContext): kotlin/Any? // com.apollographql.cache.normalized.api/ApolloResolver.resolveField|resolveField(com.apollographql.cache.normalized.api.ResolverContext){}[0]
}
abstract interface com.apollographql.cache.normalized.api/CacheData { // com.apollographql.cache.normalized.api/CacheData|null[0]
    abstract fun toMap(): kotlin.collections/Map<kotlin/String, kotlin/Any?> // com.apollographql.cache.normalized.api/CacheData.toMap|toMap(){}[0]
}
abstract interface com.apollographql.cache.normalized.api/CacheKeyGenerator { // com.apollographql.cache.normalized.api/CacheKeyGenerator|null[0]
    abstract fun cacheKeyForObject(kotlin.collections/Map<kotlin/String, kotlin/Any?>, com.apollographql.cache.normalized.api/CacheKeyGeneratorContext): com.apollographql.cache.normalized.api/CacheKey? // com.apollographql.cache.normalized.api/CacheKeyGenerator.cacheKeyForObject|cacheKeyForObject(kotlin.collections.Map<kotlin.String,kotlin.Any?>;com.apollographql.cache.normalized.api.CacheKeyGeneratorContext){}[0]
}
abstract interface com.apollographql.cache.normalized.api/CacheResolver { // com.apollographql.cache.normalized.api/CacheResolver|null[0]
    abstract fun resolveField(com.apollographql.apollo3.api/CompiledField, com.apollographql.apollo3.api/Executable.Variables, kotlin.collections/Map<kotlin/String, kotlin/Any?>, kotlin/String): kotlin/Any? // com.apollographql.cache.normalized.api/CacheResolver.resolveField|resolveField(com.apollographql.apollo3.api.CompiledField;com.apollographql.apollo3.api.Executable.Variables;kotlin.collections.Map<kotlin.String,kotlin.Any?>;kotlin.String){}[0]
}
abstract interface com.apollographql.cache.normalized.api/EmbeddedFieldsProvider { // com.apollographql.cache.normalized.api/EmbeddedFieldsProvider|null[0]
    abstract fun getEmbeddedFields(com.apollographql.cache.normalized.api/EmbeddedFieldsContext): kotlin.collections/List<kotlin/String> // com.apollographql.cache.normalized.api/EmbeddedFieldsProvider.getEmbeddedFields|getEmbeddedFields(com.apollographql.cache.normalized.api.EmbeddedFieldsContext){}[0]
}
abstract interface com.apollographql.cache.normalized.api/FieldKeyGenerator { // com.apollographql.cache.normalized.api/FieldKeyGenerator|null[0]
    abstract fun getFieldKey(com.apollographql.cache.normalized.api/FieldKeyContext): kotlin/String // com.apollographql.cache.normalized.api/FieldKeyGenerator.getFieldKey|getFieldKey(com.apollographql.cache.normalized.api.FieldKeyContext){}[0]
}
abstract interface com.apollographql.cache.normalized.api/MetadataGenerator { // com.apollographql.cache.normalized.api/MetadataGenerator|null[0]
    abstract fun metadataForObject(kotlin/Any?, com.apollographql.cache.normalized.api/MetadataGeneratorContext): kotlin.collections/Map<kotlin/String, kotlin/Any?> // com.apollographql.cache.normalized.api/MetadataGenerator.metadataForObject|metadataForObject(kotlin.Any?;com.apollographql.cache.normalized.api.MetadataGeneratorContext){}[0]
}
abstract interface com.apollographql.cache.normalized.api/NormalizedCache : com.apollographql.cache.normalized.api/ReadOnlyNormalizedCache { // com.apollographql.cache.normalized.api/NormalizedCache|null[0]
    abstract fun clearAll() // com.apollographql.cache.normalized.api/NormalizedCache.clearAll|clearAll(){}[0]
    abstract fun merge(com.apollographql.cache.normalized.api/Record, com.apollographql.cache.normalized.api/CacheHeaders, com.apollographql.cache.normalized.api/RecordMerger): kotlin.collections/Set<kotlin/String> // com.apollographql.cache.normalized.api/NormalizedCache.merge|merge(com.apollographql.cache.normalized.api.Record;com.apollographql.cache.normalized.api.CacheHeaders;com.apollographql.cache.normalized.api.RecordMerger){}[0]
    abstract fun merge(kotlin.collections/Collection<com.apollographql.cache.normalized.api/Record>, com.apollographql.cache.normalized.api/CacheHeaders, com.apollographql.cache.normalized.api/RecordMerger): kotlin.collections/Set<kotlin/String> // com.apollographql.cache.normalized.api/NormalizedCache.merge|merge(kotlin.collections.Collection<com.apollographql.cache.normalized.api.Record>;com.apollographql.cache.normalized.api.CacheHeaders;com.apollographql.cache.normalized.api.RecordMerger){}[0]
    abstract fun remove(com.apollographql.cache.normalized.api/CacheKey, kotlin/Boolean): kotlin/Boolean // com.apollographql.cache.normalized.api/NormalizedCache.remove|remove(com.apollographql.cache.normalized.api.CacheKey;kotlin.Boolean){}[0]
    abstract fun remove(kotlin/String): kotlin/Int // com.apollographql.cache.normalized.api/NormalizedCache.remove|remove(kotlin.String){}[0]
    final object Companion { // com.apollographql.cache.normalized.api/NormalizedCache.Companion|null[0]
        final fun prettifyDump(kotlin.collections/Map<kotlin.reflect/KClass<*>, kotlin.collections/Map<kotlin/String, com.apollographql.cache.normalized.api/Record>>): kotlin/String // com.apollographql.cache.normalized.api/NormalizedCache.Companion.prettifyDump|prettifyDump(kotlin.collections.Map<kotlin.reflect.KClass<*>,kotlin.collections.Map<kotlin.String,com.apollographql.cache.normalized.api.Record>>){}[0]
    }
}
abstract interface com.apollographql.cache.normalized.api/ReadOnlyNormalizedCache { // com.apollographql.cache.normalized.api/ReadOnlyNormalizedCache|null[0]
    abstract fun dump(): kotlin.collections/Map<kotlin.reflect/KClass<*>, kotlin.collections/Map<kotlin/String, com.apollographql.cache.normalized.api/Record>> // com.apollographql.cache.normalized.api/ReadOnlyNormalizedCache.dump|dump(){}[0]
    abstract fun loadRecord(kotlin/String, com.apollographql.cache.normalized.api/CacheHeaders): com.apollographql.cache.normalized.api/Record? // com.apollographql.cache.normalized.api/ReadOnlyNormalizedCache.loadRecord|loadRecord(kotlin.String;com.apollographql.cache.normalized.api.CacheHeaders){}[0]
    abstract fun loadRecords(kotlin.collections/Collection<kotlin/String>, com.apollographql.cache.normalized.api/CacheHeaders): kotlin.collections/Collection<com.apollographql.cache.normalized.api/Record> // com.apollographql.cache.normalized.api/ReadOnlyNormalizedCache.loadRecords|loadRecords(kotlin.collections.Collection<kotlin.String>;com.apollographql.cache.normalized.api.CacheHeaders){}[0]
}
abstract interface com.apollographql.cache.normalized.api/RecordMerger { // com.apollographql.cache.normalized.api/RecordMerger|null[0]
    abstract fun merge(com.apollographql.cache.normalized.api/Record, com.apollographql.cache.normalized.api/Record, kotlin/Long?): kotlin/Pair<com.apollographql.cache.normalized.api/Record, kotlin.collections/Set<kotlin/String>> // com.apollographql.cache.normalized.api/RecordMerger.merge|merge(com.apollographql.cache.normalized.api.Record;com.apollographql.cache.normalized.api.Record;kotlin.Long?){}[0]
}
final class <#A: kotlin/Any, #B: kotlin/Any> com.apollographql.cache.normalized.api.internal.store/CacheBuilder { // com.apollographql.cache.normalized.api.internal.store/CacheBuilder|null[0]
    constructor <init>() // com.apollographql.cache.normalized.api.internal.store/CacheBuilder.<init>|<init>(){}[0]
    final fun build(): com.apollographql.cache.normalized.api.internal.store/Cache<#A, #B> // com.apollographql.cache.normalized.api.internal.store/CacheBuilder.build|build(){}[0]
    final fun concurrencyLevel(kotlin/Function0<kotlin/Int>): com.apollographql.cache.normalized.api.internal.store/CacheBuilder<#A, #B> // com.apollographql.cache.normalized.api.internal.store/CacheBuilder.concurrencyLevel|concurrencyLevel(kotlin.Function0<kotlin.Int>){}[0]
    final fun expireAfterAccess(kotlin.time/Duration): com.apollographql.cache.normalized.api.internal.store/CacheBuilder<#A, #B> // com.apollographql.cache.normalized.api.internal.store/CacheBuilder.expireAfterAccess|expireAfterAccess(kotlin.time.Duration){}[0]
    final fun expireAfterWrite(kotlin.time/Duration): com.apollographql.cache.normalized.api.internal.store/CacheBuilder<#A, #B> // com.apollographql.cache.normalized.api.internal.store/CacheBuilder.expireAfterWrite|expireAfterWrite(kotlin.time.Duration){}[0]
    final fun maximumSize(kotlin/Long): com.apollographql.cache.normalized.api.internal.store/CacheBuilder<#A, #B> // com.apollographql.cache.normalized.api.internal.store/CacheBuilder.maximumSize|maximumSize(kotlin.Long){}[0]
    final fun ticker(kotlin/Function0<kotlin/Long>): com.apollographql.cache.normalized.api.internal.store/CacheBuilder<#A, #B> // com.apollographql.cache.normalized.api.internal.store/CacheBuilder.ticker|ticker(kotlin.Function0<kotlin.Long>){}[0]
    final fun weigher(kotlin/Long, kotlin/Function2<#A, #B, kotlin/Int>): com.apollographql.cache.normalized.api.internal.store/CacheBuilder<#A, #B> // com.apollographql.cache.normalized.api.internal.store/CacheBuilder.weigher|weigher(kotlin.Long;kotlin.Function2<1:0,1:1,kotlin.Int>){}[0]
    final object Companion // com.apollographql.cache.normalized.api.internal.store/CacheBuilder.Companion|null[0]
}
final class com.apollographql.cache.normalized.api.internal/Lock { // com.apollographql.cache.normalized.api.internal/Lock|null[0]
    constructor <init>() // com.apollographql.cache.normalized.api.internal/Lock.<init>|<init>(){}[0]
    final fun <#A1: kotlin/Any?> read(kotlin/Function0<#A1>): #A1 // com.apollographql.cache.normalized.api.internal/Lock.read|read(kotlin.Function0<0:0>){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> write(kotlin/Function0<#A1>): #A1 // com.apollographql.cache.normalized.api.internal/Lock.write|write(kotlin.Function0<0:0>){0§<kotlin.Any?>}[0]
}
final class com.apollographql.cache.normalized.api.internal/OptimisticNormalizedCache : com.apollographql.cache.normalized.api/NormalizedCache { // com.apollographql.cache.normalized.api.internal/OptimisticNormalizedCache|null[0]
    constructor <init>(com.apollographql.cache.normalized.api/NormalizedCache) // com.apollographql.cache.normalized.api.internal/OptimisticNormalizedCache.<init>|<init>(com.apollographql.cache.normalized.api.NormalizedCache){}[0]
    final fun addOptimisticUpdate(com.apollographql.cache.normalized.api/Record): kotlin.collections/Set<kotlin/String> // com.apollographql.cache.normalized.api.internal/OptimisticNormalizedCache.addOptimisticUpdate|addOptimisticUpdate(com.apollographql.cache.normalized.api.Record){}[0]
    final fun addOptimisticUpdates(kotlin.collections/Collection<com.apollographql.cache.normalized.api/Record>): kotlin.collections/Set<kotlin/String> // com.apollographql.cache.normalized.api.internal/OptimisticNormalizedCache.addOptimisticUpdates|addOptimisticUpdates(kotlin.collections.Collection<com.apollographql.cache.normalized.api.Record>){}[0]
    final fun clearAll() // com.apollographql.cache.normalized.api.internal/OptimisticNormalizedCache.clearAll|clearAll(){}[0]
    final fun dump(): kotlin.collections/Map<kotlin.reflect/KClass<*>, kotlin.collections/Map<kotlin/String, com.apollographql.cache.normalized.api/Record>> // com.apollographql.cache.normalized.api.internal/OptimisticNormalizedCache.dump|dump(){}[0]
    final fun loadRecord(kotlin/String, com.apollographql.cache.normalized.api/CacheHeaders): com.apollographql.cache.normalized.api/Record? // com.apollographql.cache.normalized.api.internal/OptimisticNormalizedCache.loadRecord|loadRecord(kotlin.String;com.apollographql.cache.normalized.api.CacheHeaders){}[0]
    final fun loadRecords(kotlin.collections/Collection<kotlin/String>, com.apollographql.cache.normalized.api/CacheHeaders): kotlin.collections/Collection<com.apollographql.cache.normalized.api/Record> // com.apollographql.cache.normalized.api.internal/OptimisticNormalizedCache.loadRecords|loadRecords(kotlin.collections.Collection<kotlin.String>;com.apollographql.cache.normalized.api.CacheHeaders){}[0]
    final fun merge(com.apollographql.cache.normalized.api/Record, com.apollographql.cache.normalized.api/CacheHeaders, com.apollographql.cache.normalized.api/RecordMerger): kotlin.collections/Set<kotlin/String> // com.apollographql.cache.normalized.api.internal/OptimisticNormalizedCache.merge|merge(com.apollographql.cache.normalized.api.Record;com.apollographql.cache.normalized.api.CacheHeaders;com.apollographql.cache.normalized.api.RecordMerger){}[0]
    final fun merge(kotlin.collections/Collection<com.apollographql.cache.normalized.api/Record>, com.apollographql.cache.normalized.api/CacheHeaders, com.apollographql.cache.normalized.api/RecordMerger): kotlin.collections/Set<kotlin/String> // com.apollographql.cache.normalized.api.internal/OptimisticNormalizedCache.merge|merge(kotlin.collections.Collection<com.apollographql.cache.normalized.api.Record>;com.apollographql.cache.normalized.api.CacheHeaders;com.apollographql.cache.normalized.api.RecordMerger){}[0]
    final fun remove(com.apollographql.cache.normalized.api/CacheKey, kotlin/Boolean): kotlin/Boolean // com.apollographql.cache.normalized.api.internal/OptimisticNormalizedCache.remove|remove(com.apollographql.cache.normalized.api.CacheKey;kotlin.Boolean){}[0]
    final fun remove(kotlin/String): kotlin/Int // com.apollographql.cache.normalized.api.internal/OptimisticNormalizedCache.remove|remove(kotlin.String){}[0]
    final fun removeOptimisticUpdates(com.benasher44.uuid/Uuid): kotlin.collections/Set<kotlin/String> // com.apollographql.cache.normalized.api.internal/OptimisticNormalizedCache.removeOptimisticUpdates|removeOptimisticUpdates(com.benasher44.uuid.Uuid){}[0]
}
final class com.apollographql.cache.normalized.api/CacheHeaders { // com.apollographql.cache.normalized.api/CacheHeaders|null[0]
    final class Builder { // com.apollographql.cache.normalized.api/CacheHeaders.Builder|null[0]
        constructor <init>() // com.apollographql.cache.normalized.api/CacheHeaders.Builder.<init>|<init>(){}[0]
        final fun addHeader(kotlin/String, kotlin/String): com.apollographql.cache.normalized.api/CacheHeaders.Builder // com.apollographql.cache.normalized.api/CacheHeaders.Builder.addHeader|addHeader(kotlin.String;kotlin.String){}[0]
        final fun addHeaders(kotlin.collections/Map<kotlin/String, kotlin/String>): com.apollographql.cache.normalized.api/CacheHeaders.Builder // com.apollographql.cache.normalized.api/CacheHeaders.Builder.addHeaders|addHeaders(kotlin.collections.Map<kotlin.String,kotlin.String>){}[0]
        final fun build(): com.apollographql.cache.normalized.api/CacheHeaders // com.apollographql.cache.normalized.api/CacheHeaders.Builder.build|build(){}[0]
    }
    final fun hasHeader(kotlin/String): kotlin/Boolean // com.apollographql.cache.normalized.api/CacheHeaders.hasHeader|hasHeader(kotlin.String){}[0]
    final fun headerValue(kotlin/String): kotlin/String? // com.apollographql.cache.normalized.api/CacheHeaders.headerValue|headerValue(kotlin.String){}[0]
    final fun newBuilder(): com.apollographql.cache.normalized.api/CacheHeaders.Builder // com.apollographql.cache.normalized.api/CacheHeaders.newBuilder|newBuilder(){}[0]
    final fun plus(com.apollographql.cache.normalized.api/CacheHeaders): com.apollographql.cache.normalized.api/CacheHeaders // com.apollographql.cache.normalized.api/CacheHeaders.plus|plus(com.apollographql.cache.normalized.api.CacheHeaders){}[0]
    final object Companion { // com.apollographql.cache.normalized.api/CacheHeaders.Companion|null[0]
        final fun builder(): com.apollographql.cache.normalized.api/CacheHeaders.Builder // com.apollographql.cache.normalized.api/CacheHeaders.Companion.builder|builder(){}[0]
        final val NONE // com.apollographql.cache.normalized.api/CacheHeaders.Companion.NONE|{}NONE[0]
            final fun <get-NONE>(): com.apollographql.cache.normalized.api/CacheHeaders // com.apollographql.cache.normalized.api/CacheHeaders.Companion.NONE.<get-NONE>|<get-NONE>(){}[0]
    }
}
final class com.apollographql.cache.normalized.api/CacheKey { // com.apollographql.cache.normalized.api/CacheKey|null[0]
    constructor <init>(kotlin/String) // com.apollographql.cache.normalized.api/CacheKey.<init>|<init>(kotlin.String){}[0]
    constructor <init>(kotlin/String, kotlin.collections/List<kotlin/String>) // com.apollographql.cache.normalized.api/CacheKey.<init>|<init>(kotlin.String;kotlin.collections.List<kotlin.String>){}[0]
    constructor <init>(kotlin/String, kotlin/Array<out kotlin/String>...) // com.apollographql.cache.normalized.api/CacheKey.<init>|<init>(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.cache.normalized.api/CacheKey.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.apollographql.cache.normalized.api/CacheKey.hashCode|hashCode(){}[0]
    final fun serialize(): kotlin/String // com.apollographql.cache.normalized.api/CacheKey.serialize|serialize(){}[0]
    final fun toString(): kotlin/String // com.apollographql.cache.normalized.api/CacheKey.toString|toString(){}[0]
    final object Companion { // com.apollographql.cache.normalized.api/CacheKey.Companion|null[0]
        final fun canDeserialize(kotlin/String): kotlin/Boolean // com.apollographql.cache.normalized.api/CacheKey.Companion.canDeserialize|canDeserialize(kotlin.String){}[0]
        final fun deserialize(kotlin/String): com.apollographql.cache.normalized.api/CacheKey // com.apollographql.cache.normalized.api/CacheKey.Companion.deserialize|deserialize(kotlin.String){}[0]
        final fun from(kotlin/String, kotlin.collections/List<kotlin/String>): com.apollographql.cache.normalized.api/CacheKey // com.apollographql.cache.normalized.api/CacheKey.Companion.from|from(kotlin.String;kotlin.collections.List<kotlin.String>){}[0]
        final fun from(kotlin/String, kotlin/Array<out kotlin/String>...): com.apollographql.cache.normalized.api/CacheKey // com.apollographql.cache.normalized.api/CacheKey.Companion.from|from(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
        final fun rootKey(): com.apollographql.cache.normalized.api/CacheKey // com.apollographql.cache.normalized.api/CacheKey.Companion.rootKey|rootKey(){}[0]
    }
    final val key // com.apollographql.cache.normalized.api/CacheKey.key|{}key[0]
        final fun <get-key>(): kotlin/String // com.apollographql.cache.normalized.api/CacheKey.key.<get-key>|<get-key>(){}[0]
}
final class com.apollographql.cache.normalized.api/CacheKeyGeneratorContext { // com.apollographql.cache.normalized.api/CacheKeyGeneratorContext|null[0]
    constructor <init>(com.apollographql.apollo3.api/CompiledField, com.apollographql.apollo3.api/Executable.Variables) // com.apollographql.cache.normalized.api/CacheKeyGeneratorContext.<init>|<init>(com.apollographql.apollo3.api.CompiledField;com.apollographql.apollo3.api.Executable.Variables){}[0]
    final val field // com.apollographql.cache.normalized.api/CacheKeyGeneratorContext.field|{}field[0]
        final fun <get-field>(): com.apollographql.apollo3.api/CompiledField // com.apollographql.cache.normalized.api/CacheKeyGeneratorContext.field.<get-field>|<get-field>(){}[0]
    final val variables // com.apollographql.cache.normalized.api/CacheKeyGeneratorContext.variables|{}variables[0]
        final fun <get-variables>(): com.apollographql.apollo3.api/Executable.Variables // com.apollographql.cache.normalized.api/CacheKeyGeneratorContext.variables.<get-variables>|<get-variables>(){}[0]
}
final class com.apollographql.cache.normalized.api/ConnectionEmbeddedFieldsProvider : com.apollographql.cache.normalized.api/EmbeddedFieldsProvider { // com.apollographql.cache.normalized.api/ConnectionEmbeddedFieldsProvider|null[0]
    constructor <init>(kotlin.collections/Map<kotlin/String, kotlin.collections/List<kotlin/String>>, kotlin.collections/Set<kotlin/String>) // com.apollographql.cache.normalized.api/ConnectionEmbeddedFieldsProvider.<init>|<init>(kotlin.collections.Map<kotlin.String,kotlin.collections.List<kotlin.String>>;kotlin.collections.Set<kotlin.String>){}[0]
    final fun getEmbeddedFields(com.apollographql.cache.normalized.api/EmbeddedFieldsContext): kotlin.collections/List<kotlin/String> // com.apollographql.cache.normalized.api/ConnectionEmbeddedFieldsProvider.getEmbeddedFields|getEmbeddedFields(com.apollographql.cache.normalized.api.EmbeddedFieldsContext){}[0]
    final object Companion // com.apollographql.cache.normalized.api/ConnectionEmbeddedFieldsProvider.Companion|null[0]
}
final class com.apollographql.cache.normalized.api/ConnectionFieldKeyGenerator : com.apollographql.cache.normalized.api/FieldKeyGenerator { // com.apollographql.cache.normalized.api/ConnectionFieldKeyGenerator|null[0]
    constructor <init>(kotlin.collections/Map<kotlin/String, kotlin.collections/List<kotlin/String>>) // com.apollographql.cache.normalized.api/ConnectionFieldKeyGenerator.<init>|<init>(kotlin.collections.Map<kotlin.String,kotlin.collections.List<kotlin.String>>){}[0]
    final fun getFieldKey(com.apollographql.cache.normalized.api/FieldKeyContext): kotlin/String // com.apollographql.cache.normalized.api/ConnectionFieldKeyGenerator.getFieldKey|getFieldKey(com.apollographql.cache.normalized.api.FieldKeyContext){}[0]
    final object Companion // com.apollographql.cache.normalized.api/ConnectionFieldKeyGenerator.Companion|null[0]
}
final class com.apollographql.cache.normalized.api/ConnectionMetadataGenerator : com.apollographql.cache.normalized.api/MetadataGenerator { // com.apollographql.cache.normalized.api/ConnectionMetadataGenerator|null[0]
    constructor <init>(kotlin.collections/Set<kotlin/String>) // com.apollographql.cache.normalized.api/ConnectionMetadataGenerator.<init>|<init>(kotlin.collections.Set<kotlin.String>){}[0]
    final fun metadataForObject(kotlin/Any?, com.apollographql.cache.normalized.api/MetadataGeneratorContext): kotlin.collections/Map<kotlin/String, kotlin/Any?> // com.apollographql.cache.normalized.api/ConnectionMetadataGenerator.metadataForObject|metadataForObject(kotlin.Any?;com.apollographql.cache.normalized.api.MetadataGeneratorContext){}[0]
}
final class com.apollographql.cache.normalized.api/EmbeddedFieldsContext { // com.apollographql.cache.normalized.api/EmbeddedFieldsContext|null[0]
    constructor <init>(com.apollographql.apollo3.api/CompiledNamedType) // com.apollographql.cache.normalized.api/EmbeddedFieldsContext.<init>|<init>(com.apollographql.apollo3.api.CompiledNamedType){}[0]
    final val parentType // com.apollographql.cache.normalized.api/EmbeddedFieldsContext.parentType|{}parentType[0]
        final fun <get-parentType>(): com.apollographql.apollo3.api/CompiledNamedType // com.apollographql.cache.normalized.api/EmbeddedFieldsContext.parentType.<get-parentType>|<get-parentType>(){}[0]
}
final class com.apollographql.cache.normalized.api/ExpireDateCacheResolver : com.apollographql.cache.normalized.api/CacheResolver { // com.apollographql.cache.normalized.api/ExpireDateCacheResolver|null[0]
    constructor <init>() // com.apollographql.cache.normalized.api/ExpireDateCacheResolver.<init>|<init>(){}[0]
    final fun resolveField(com.apollographql.apollo3.api/CompiledField, com.apollographql.apollo3.api/Executable.Variables, kotlin.collections/Map<kotlin/String, kotlin/Any?>, kotlin/String): kotlin/Any? // com.apollographql.cache.normalized.api/ExpireDateCacheResolver.resolveField|resolveField(com.apollographql.apollo3.api.CompiledField;com.apollographql.apollo3.api.Executable.Variables;kotlin.collections.Map<kotlin.String,kotlin.Any?>;kotlin.String){}[0]
}
final class com.apollographql.cache.normalized.api/FieldKeyContext { // com.apollographql.cache.normalized.api/FieldKeyContext|null[0]
    constructor <init>(kotlin/String, com.apollographql.apollo3.api/CompiledField, com.apollographql.apollo3.api/Executable.Variables) // com.apollographql.cache.normalized.api/FieldKeyContext.<init>|<init>(kotlin.String;com.apollographql.apollo3.api.CompiledField;com.apollographql.apollo3.api.Executable.Variables){}[0]
    final val field // com.apollographql.cache.normalized.api/FieldKeyContext.field|{}field[0]
        final fun <get-field>(): com.apollographql.apollo3.api/CompiledField // com.apollographql.cache.normalized.api/FieldKeyContext.field.<get-field>|<get-field>(){}[0]
    final val parentType // com.apollographql.cache.normalized.api/FieldKeyContext.parentType|{}parentType[0]
        final fun <get-parentType>(): kotlin/String // com.apollographql.cache.normalized.api/FieldKeyContext.parentType.<get-parentType>|<get-parentType>(){}[0]
    final val variables // com.apollographql.cache.normalized.api/FieldKeyContext.variables|{}variables[0]
        final fun <get-variables>(): com.apollographql.apollo3.api/Executable.Variables // com.apollographql.cache.normalized.api/FieldKeyContext.variables.<get-variables>|<get-variables>(){}[0]
}
final class com.apollographql.cache.normalized.api/FieldRecordMerger : com.apollographql.cache.normalized.api/RecordMerger { // com.apollographql.cache.normalized.api/FieldRecordMerger|null[0]
    abstract interface FieldMerger { // com.apollographql.cache.normalized.api/FieldRecordMerger.FieldMerger|null[0]
        abstract fun mergeFields(com.apollographql.cache.normalized.api/FieldRecordMerger.FieldInfo, com.apollographql.cache.normalized.api/FieldRecordMerger.FieldInfo): com.apollographql.cache.normalized.api/FieldRecordMerger.FieldInfo // com.apollographql.cache.normalized.api/FieldRecordMerger.FieldMerger.mergeFields|mergeFields(com.apollographql.cache.normalized.api.FieldRecordMerger.FieldInfo;com.apollographql.cache.normalized.api.FieldRecordMerger.FieldInfo){}[0]
    }
    constructor <init>(com.apollographql.cache.normalized.api/FieldRecordMerger.FieldMerger) // com.apollographql.cache.normalized.api/FieldRecordMerger.<init>|<init>(com.apollographql.cache.normalized.api.FieldRecordMerger.FieldMerger){}[0]
    final class FieldInfo { // com.apollographql.cache.normalized.api/FieldRecordMerger.FieldInfo|null[0]
        constructor <init>(kotlin/Any?, kotlin.collections/Map<kotlin/String, kotlin/Any?>) // com.apollographql.cache.normalized.api/FieldRecordMerger.FieldInfo.<init>|<init>(kotlin.Any?;kotlin.collections.Map<kotlin.String,kotlin.Any?>){}[0]
        final fun component1(): kotlin/Any? // com.apollographql.cache.normalized.api/FieldRecordMerger.FieldInfo.component1|component1(){}[0]
        final fun component2(): kotlin.collections/Map<kotlin/String, kotlin/Any?> // com.apollographql.cache.normalized.api/FieldRecordMerger.FieldInfo.component2|component2(){}[0]
        final fun copy(kotlin/Any? = ..., kotlin.collections/Map<kotlin/String, kotlin/Any?> = ...): com.apollographql.cache.normalized.api/FieldRecordMerger.FieldInfo // com.apollographql.cache.normalized.api/FieldRecordMerger.FieldInfo.copy|copy(kotlin.Any?;kotlin.collections.Map<kotlin.String,kotlin.Any?>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.cache.normalized.api/FieldRecordMerger.FieldInfo.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.apollographql.cache.normalized.api/FieldRecordMerger.FieldInfo.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.apollographql.cache.normalized.api/FieldRecordMerger.FieldInfo.toString|toString(){}[0]
        final val metadata // com.apollographql.cache.normalized.api/FieldRecordMerger.FieldInfo.metadata|{}metadata[0]
            final fun <get-metadata>(): kotlin.collections/Map<kotlin/String, kotlin/Any?> // com.apollographql.cache.normalized.api/FieldRecordMerger.FieldInfo.metadata.<get-metadata>|<get-metadata>(){}[0]
        final val value // com.apollographql.cache.normalized.api/FieldRecordMerger.FieldInfo.value|{}value[0]
            final fun <get-value>(): kotlin/Any? // com.apollographql.cache.normalized.api/FieldRecordMerger.FieldInfo.value.<get-value>|<get-value>(){}[0]
    }
    final fun merge(com.apollographql.cache.normalized.api/Record, com.apollographql.cache.normalized.api/Record, kotlin/Long?): kotlin/Pair<com.apollographql.cache.normalized.api/Record, kotlin.collections/Set<kotlin/String>> // com.apollographql.cache.normalized.api/FieldRecordMerger.merge|merge(com.apollographql.cache.normalized.api.Record;com.apollographql.cache.normalized.api.Record;kotlin.Long?){}[0]
}
final class com.apollographql.cache.normalized.api/MemoryCache : com.apollographql.cache.normalized.api/NormalizedCache { // com.apollographql.cache.normalized.api/MemoryCache|null[0]
    constructor <init>(com.apollographql.cache.normalized.api/NormalizedCache? = ..., kotlin/Int = ..., kotlin/Long = ...) // com.apollographql.cache.normalized.api/MemoryCache.<init>|<init>(com.apollographql.cache.normalized.api.NormalizedCache?;kotlin.Int;kotlin.Long){}[0]
    final fun clearAll() // com.apollographql.cache.normalized.api/MemoryCache.clearAll|clearAll(){}[0]
    final fun dump(): kotlin.collections/Map<kotlin.reflect/KClass<*>, kotlin.collections/Map<kotlin/String, com.apollographql.cache.normalized.api/Record>> // com.apollographql.cache.normalized.api/MemoryCache.dump|dump(){}[0]
    final fun loadRecord(kotlin/String, com.apollographql.cache.normalized.api/CacheHeaders): com.apollographql.cache.normalized.api/Record? // com.apollographql.cache.normalized.api/MemoryCache.loadRecord|loadRecord(kotlin.String;com.apollographql.cache.normalized.api.CacheHeaders){}[0]
    final fun loadRecords(kotlin.collections/Collection<kotlin/String>, com.apollographql.cache.normalized.api/CacheHeaders): kotlin.collections/Collection<com.apollographql.cache.normalized.api/Record> // com.apollographql.cache.normalized.api/MemoryCache.loadRecords|loadRecords(kotlin.collections.Collection<kotlin.String>;com.apollographql.cache.normalized.api.CacheHeaders){}[0]
    final fun merge(com.apollographql.cache.normalized.api/Record, com.apollographql.cache.normalized.api/CacheHeaders, com.apollographql.cache.normalized.api/RecordMerger): kotlin.collections/Set<kotlin/String> // com.apollographql.cache.normalized.api/MemoryCache.merge|merge(com.apollographql.cache.normalized.api.Record;com.apollographql.cache.normalized.api.CacheHeaders;com.apollographql.cache.normalized.api.RecordMerger){}[0]
    final fun merge(kotlin.collections/Collection<com.apollographql.cache.normalized.api/Record>, com.apollographql.cache.normalized.api/CacheHeaders, com.apollographql.cache.normalized.api/RecordMerger): kotlin.collections/Set<kotlin/String> // com.apollographql.cache.normalized.api/MemoryCache.merge|merge(kotlin.collections.Collection<com.apollographql.cache.normalized.api.Record>;com.apollographql.cache.normalized.api.CacheHeaders;com.apollographql.cache.normalized.api.RecordMerger){}[0]
    final fun remove(com.apollographql.cache.normalized.api/CacheKey, kotlin/Boolean): kotlin/Boolean // com.apollographql.cache.normalized.api/MemoryCache.remove|remove(com.apollographql.cache.normalized.api.CacheKey;kotlin.Boolean){}[0]
    final fun remove(kotlin/String): kotlin/Int // com.apollographql.cache.normalized.api/MemoryCache.remove|remove(kotlin.String){}[0]
    final val size // com.apollographql.cache.normalized.api/MemoryCache.size|{}size[0]
        final fun <get-size>(): kotlin/Int // com.apollographql.cache.normalized.api/MemoryCache.size.<get-size>|<get-size>(){}[0]
}
final class com.apollographql.cache.normalized.api/MemoryCacheFactory : com.apollographql.cache.normalized.api/NormalizedCacheFactory { // com.apollographql.cache.normalized.api/MemoryCacheFactory|null[0]
    constructor <init>(kotlin/Int = ..., kotlin/Long = ...) // com.apollographql.cache.normalized.api/MemoryCacheFactory.<init>|<init>(kotlin.Int;kotlin.Long){}[0]
    final fun chain(com.apollographql.cache.normalized.api/NormalizedCacheFactory): com.apollographql.cache.normalized.api/MemoryCacheFactory // com.apollographql.cache.normalized.api/MemoryCacheFactory.chain|chain(com.apollographql.cache.normalized.api.NormalizedCacheFactory){}[0]
    final fun create(): com.apollographql.cache.normalized.api/MemoryCache // com.apollographql.cache.normalized.api/MemoryCacheFactory.create|create(){}[0]
}
final class com.apollographql.cache.normalized.api/MetadataGeneratorContext { // com.apollographql.cache.normalized.api/MetadataGeneratorContext|null[0]
    constructor <init>(com.apollographql.apollo3.api/CompiledField, com.apollographql.apollo3.api/Executable.Variables) // com.apollographql.cache.normalized.api/MetadataGeneratorContext.<init>|<init>(com.apollographql.apollo3.api.CompiledField;com.apollographql.apollo3.api.Executable.Variables){}[0]
    final fun allArgumentValues(): kotlin.collections/Map<kotlin/String, kotlin/Any?> // com.apollographql.cache.normalized.api/MetadataGeneratorContext.allArgumentValues|allArgumentValues(){}[0]
    final fun argumentValue(kotlin/String): kotlin/Any? // com.apollographql.cache.normalized.api/MetadataGeneratorContext.argumentValue|argumentValue(kotlin.String){}[0]
    final val field // com.apollographql.cache.normalized.api/MetadataGeneratorContext.field|{}field[0]
        final fun <get-field>(): com.apollographql.apollo3.api/CompiledField // com.apollographql.cache.normalized.api/MetadataGeneratorContext.field.<get-field>|<get-field>(){}[0]
    final val variables // com.apollographql.cache.normalized.api/MetadataGeneratorContext.variables|{}variables[0]
        final fun <get-variables>(): com.apollographql.apollo3.api/Executable.Variables // com.apollographql.cache.normalized.api/MetadataGeneratorContext.variables.<get-variables>|<get-variables>(){}[0]
}
final class com.apollographql.cache.normalized.api/ReceiveDateApolloResolver : com.apollographql.cache.normalized.api/ApolloResolver { // com.apollographql.cache.normalized.api/ReceiveDateApolloResolver|null[0]
    constructor <init>(kotlin/Int) // com.apollographql.cache.normalized.api/ReceiveDateApolloResolver.<init>|<init>(kotlin.Int){}[0]
    final fun resolveField(com.apollographql.cache.normalized.api/ResolverContext): kotlin/Any? // com.apollographql.cache.normalized.api/ReceiveDateApolloResolver.resolveField|resolveField(com.apollographql.cache.normalized.api.ResolverContext){}[0]
}
final class com.apollographql.cache.normalized.api/Record : kotlin.collections/Map<kotlin/String, kotlin/Any?> { // com.apollographql.cache.normalized.api/Record|null[0]
    constructor <init>(kotlin/String, kotlin.collections/Map<kotlin/String, kotlin/Any?>, com.benasher44.uuid/Uuid? = ...) // com.apollographql.cache.normalized.api/Record.<init>|<init>(kotlin.String;kotlin.collections.Map<kotlin.String,kotlin.Any?>;com.benasher44.uuid.Uuid?){}[0]
    constructor <init>(kotlin/String, kotlin.collections/Map<kotlin/String, kotlin/Any?>, com.benasher44.uuid/Uuid?, kotlin.collections/Map<kotlin/String, kotlin/Long?>, kotlin.collections/Map<kotlin/String, kotlin.collections/Map<kotlin/String, kotlin/Any?>>) // com.apollographql.cache.normalized.api/Record.<init>|<init>(kotlin.String;kotlin.collections.Map<kotlin.String,kotlin.Any?>;com.benasher44.uuid.Uuid?;kotlin.collections.Map<kotlin.String,kotlin.Long?>;kotlin.collections.Map<kotlin.String,kotlin.collections.Map<kotlin.String,kotlin.Any?>>){}[0]
    final fun containsKey(kotlin/String): kotlin/Boolean // com.apollographql.cache.normalized.api/Record.containsKey|containsKey(kotlin.String){}[0]
    final fun containsValue(kotlin/Any?): kotlin/Boolean // com.apollographql.cache.normalized.api/Record.containsValue|containsValue(kotlin.Any?){}[0]
    final fun fieldKeys(): kotlin.collections/Set<kotlin/String> // com.apollographql.cache.normalized.api/Record.fieldKeys|fieldKeys(){}[0]
    final fun get(kotlin/String): kotlin/Any? // com.apollographql.cache.normalized.api/Record.get|get(kotlin.String){}[0]
    final fun isEmpty(): kotlin/Boolean // com.apollographql.cache.normalized.api/Record.isEmpty|isEmpty(){}[0]
    final fun mergeWith(com.apollographql.cache.normalized.api/Record): kotlin/Pair<com.apollographql.cache.normalized.api/Record, kotlin.collections/Set<kotlin/String>> // com.apollographql.cache.normalized.api/Record.mergeWith|mergeWith(com.apollographql.cache.normalized.api.Record){}[0]
    final fun referencedFields(): kotlin.collections/List<com.apollographql.cache.normalized.api/CacheKey> // com.apollographql.cache.normalized.api/Record.referencedFields|referencedFields(){}[0]
    final object Companion // com.apollographql.cache.normalized.api/Record.Companion|null[0]
    final val entries // com.apollographql.cache.normalized.api/Record.entries|{}entries[0]
        final fun <get-entries>(): kotlin.collections/Set<kotlin.collections/Map.Entry<kotlin/String, kotlin/Any?>> // com.apollographql.cache.normalized.api/Record.entries.<get-entries>|<get-entries>(){}[0]
    final val fields // com.apollographql.cache.normalized.api/Record.fields|{}fields[0]
        final fun <get-fields>(): kotlin.collections/Map<kotlin/String, kotlin/Any?> // com.apollographql.cache.normalized.api/Record.fields.<get-fields>|<get-fields>(){}[0]
    final val key // com.apollographql.cache.normalized.api/Record.key|{}key[0]
        final fun <get-key>(): kotlin/String // com.apollographql.cache.normalized.api/Record.key.<get-key>|<get-key>(){}[0]
    final val keys // com.apollographql.cache.normalized.api/Record.keys|{}keys[0]
        final fun <get-keys>(): kotlin.collections/Set<kotlin/String> // com.apollographql.cache.normalized.api/Record.keys.<get-keys>|<get-keys>(){}[0]
    final val mutationId // com.apollographql.cache.normalized.api/Record.mutationId|{}mutationId[0]
        final fun <get-mutationId>(): com.benasher44.uuid/Uuid? // com.apollographql.cache.normalized.api/Record.mutationId.<get-mutationId>|<get-mutationId>(){}[0]
    final val size // com.apollographql.cache.normalized.api/Record.size|{}size[0]
        final fun <get-size>(): kotlin/Int // com.apollographql.cache.normalized.api/Record.size.<get-size>|<get-size>(){}[0]
    final val sizeInBytes // com.apollographql.cache.normalized.api/Record.sizeInBytes|{}sizeInBytes[0]
        final fun <get-sizeInBytes>(): kotlin/Int // com.apollographql.cache.normalized.api/Record.sizeInBytes.<get-sizeInBytes>|<get-sizeInBytes>(){}[0]
    final val values // com.apollographql.cache.normalized.api/Record.values|{}values[0]
        final fun <get-values>(): kotlin.collections/Collection<kotlin/Any?> // com.apollographql.cache.normalized.api/Record.values.<get-values>|<get-values>(){}[0]
    final var dates // com.apollographql.cache.normalized.api/Record.dates|{}dates[0]
        final fun <get-dates>(): kotlin.collections/Map<kotlin/String, kotlin/Long?>? // com.apollographql.cache.normalized.api/Record.dates.<get-dates>|<get-dates>(){}[0]
    final var metadata // com.apollographql.cache.normalized.api/Record.metadata|{}metadata[0]
        final fun <get-metadata>(): kotlin.collections/Map<kotlin/String, kotlin.collections/Map<kotlin/String, kotlin/Any?>> // com.apollographql.cache.normalized.api/Record.metadata.<get-metadata>|<get-metadata>(){}[0]
    // Targets: [js]
    final fun asJsReadonlyMapView(): kotlin.js.collections/JsReadonlyMap<kotlin/String, kotlin/Any?> // com.apollographql.cache.normalized.api/Record.asJsReadonlyMapView|asJsReadonlyMapView(){}[0]
}
final class com.apollographql.cache.normalized.api/ResolverContext { // com.apollographql.cache.normalized.api/ResolverContext|null[0]
    constructor <init>(com.apollographql.apollo3.api/CompiledField, com.apollographql.apollo3.api/Executable.Variables, kotlin.collections/Map<kotlin/String, kotlin/Any?>, kotlin/String, kotlin/String, com.apollographql.cache.normalized.api/CacheHeaders, com.apollographql.cache.normalized.api/FieldKeyGenerator) // com.apollographql.cache.normalized.api/ResolverContext.<init>|<init>(com.apollographql.apollo3.api.CompiledField;com.apollographql.apollo3.api.Executable.Variables;kotlin.collections.Map<kotlin.String,kotlin.Any?>;kotlin.String;kotlin.String;com.apollographql.cache.normalized.api.CacheHeaders;com.apollographql.cache.normalized.api.FieldKeyGenerator){}[0]
    final val cacheHeaders // com.apollographql.cache.normalized.api/ResolverContext.cacheHeaders|{}cacheHeaders[0]
        final fun <get-cacheHeaders>(): com.apollographql.cache.normalized.api/CacheHeaders // com.apollographql.cache.normalized.api/ResolverContext.cacheHeaders.<get-cacheHeaders>|<get-cacheHeaders>(){}[0]
    final val field // com.apollographql.cache.normalized.api/ResolverContext.field|{}field[0]
        final fun <get-field>(): com.apollographql.apollo3.api/CompiledField // com.apollographql.cache.normalized.api/ResolverContext.field.<get-field>|<get-field>(){}[0]
    final val fieldKeyGenerator // com.apollographql.cache.normalized.api/ResolverContext.fieldKeyGenerator|{}fieldKeyGenerator[0]
        final fun <get-fieldKeyGenerator>(): com.apollographql.cache.normalized.api/FieldKeyGenerator // com.apollographql.cache.normalized.api/ResolverContext.fieldKeyGenerator.<get-fieldKeyGenerator>|<get-fieldKeyGenerator>(){}[0]
    final val parent // com.apollographql.cache.normalized.api/ResolverContext.parent|{}parent[0]
        final fun <get-parent>(): kotlin.collections/Map<kotlin/String, kotlin/Any?> // com.apollographql.cache.normalized.api/ResolverContext.parent.<get-parent>|<get-parent>(){}[0]
    final val parentKey // com.apollographql.cache.normalized.api/ResolverContext.parentKey|{}parentKey[0]
        final fun <get-parentKey>(): kotlin/String // com.apollographql.cache.normalized.api/ResolverContext.parentKey.<get-parentKey>|<get-parentKey>(){}[0]
    final val parentType // com.apollographql.cache.normalized.api/ResolverContext.parentType|{}parentType[0]
        final fun <get-parentType>(): kotlin/String // com.apollographql.cache.normalized.api/ResolverContext.parentType.<get-parentType>|<get-parentType>(){}[0]
    final val variables // com.apollographql.cache.normalized.api/ResolverContext.variables|{}variables[0]
        final fun <get-variables>(): com.apollographql.apollo3.api/Executable.Variables // com.apollographql.cache.normalized.api/ResolverContext.variables.<get-variables>|<get-variables>(){}[0]
}
final const val com.apollographql.cache.normalized.api/VERSION // com.apollographql.cache.normalized.api/VERSION|{}VERSION[0]
    final fun <get-VERSION>(): kotlin/String // com.apollographql.cache.normalized.api/VERSION.<get-VERSION>|<get-VERSION>(){}[0]
final fun (kotlin.collections/Collection<com.apollographql.cache.normalized.api/Record>?).com.apollographql.cache.normalized.api/dependentKeys(): kotlin.collections/Set<kotlin/String> // com.apollographql.cache.normalized.api/dependentKeys|dependentKeys@kotlin.collections.Collection<com.apollographql.cache.normalized.api.Record>?(){}[0]
final fun <#A: com.apollographql.apollo3.api/Executable.Data> (com.apollographql.apollo3.api/Executable<#A>).com.apollographql.cache.normalized.api/normalize(#A, com.apollographql.apollo3.api/CustomScalarAdapters, com.apollographql.cache.normalized.api/CacheKeyGenerator, com.apollographql.cache.normalized.api/MetadataGenerator = ..., com.apollographql.cache.normalized.api/FieldKeyGenerator = ..., com.apollographql.cache.normalized.api/EmbeddedFieldsProvider = ..., kotlin/String): kotlin.collections/Map<kotlin/String, com.apollographql.cache.normalized.api/Record> // com.apollographql.cache.normalized.api/normalize|normalize@com.apollographql.apollo3.api.Executable<0:0>(0:0;com.apollographql.apollo3.api.CustomScalarAdapters;com.apollographql.cache.normalized.api.CacheKeyGenerator;com.apollographql.cache.normalized.api.MetadataGenerator;com.apollographql.cache.normalized.api.FieldKeyGenerator;com.apollographql.cache.normalized.api.EmbeddedFieldsProvider;kotlin.String){0§<com.apollographql.apollo3.api.Executable.Data>}[0]
final fun <#A: com.apollographql.apollo3.api/Executable.Data> (com.apollographql.apollo3.api/Executable<#A>).com.apollographql.cache.normalized.api/readDataFromCache(com.apollographql.apollo3.api/CustomScalarAdapters, com.apollographql.cache.normalized.api/ReadOnlyNormalizedCache, com.apollographql.cache.normalized.api/ApolloResolver, com.apollographql.cache.normalized.api/CacheHeaders, com.apollographql.cache.normalized.api/FieldKeyGenerator = ...): #A // com.apollographql.cache.normalized.api/readDataFromCache|readDataFromCache@com.apollographql.apollo3.api.Executable<0:0>(com.apollographql.apollo3.api.CustomScalarAdapters;com.apollographql.cache.normalized.api.ReadOnlyNormalizedCache;com.apollographql.cache.normalized.api.ApolloResolver;com.apollographql.cache.normalized.api.CacheHeaders;com.apollographql.cache.normalized.api.FieldKeyGenerator){0§<com.apollographql.apollo3.api.Executable.Data>}[0]
final fun <#A: com.apollographql.apollo3.api/Executable.Data> (com.apollographql.apollo3.api/Executable<#A>).com.apollographql.cache.normalized.api/readDataFromCache(com.apollographql.apollo3.api/CustomScalarAdapters, com.apollographql.cache.normalized.api/ReadOnlyNormalizedCache, com.apollographql.cache.normalized.api/CacheResolver, com.apollographql.cache.normalized.api/CacheHeaders, com.apollographql.cache.normalized.api/FieldKeyGenerator = ...): #A // com.apollographql.cache.normalized.api/readDataFromCache|readDataFromCache@com.apollographql.apollo3.api.Executable<0:0>(com.apollographql.apollo3.api.CustomScalarAdapters;com.apollographql.cache.normalized.api.ReadOnlyNormalizedCache;com.apollographql.cache.normalized.api.CacheResolver;com.apollographql.cache.normalized.api.CacheHeaders;com.apollographql.cache.normalized.api.FieldKeyGenerator){0§<com.apollographql.apollo3.api.Executable.Data>}[0]
final fun <#A: com.apollographql.apollo3.api/Executable.Data> (com.apollographql.apollo3.api/Executable<#A>).com.apollographql.cache.normalized.api/readDataFromCache(com.apollographql.cache.normalized.api/CacheKey, com.apollographql.apollo3.api/CustomScalarAdapters, com.apollographql.cache.normalized.api/ReadOnlyNormalizedCache, com.apollographql.cache.normalized.api/ApolloResolver, com.apollographql.cache.normalized.api/CacheHeaders, com.apollographql.cache.normalized.api/FieldKeyGenerator = ...): #A // com.apollographql.cache.normalized.api/readDataFromCache|readDataFromCache@com.apollographql.apollo3.api.Executable<0:0>(com.apollographql.cache.normalized.api.CacheKey;com.apollographql.apollo3.api.CustomScalarAdapters;com.apollographql.cache.normalized.api.ReadOnlyNormalizedCache;com.apollographql.cache.normalized.api.ApolloResolver;com.apollographql.cache.normalized.api.CacheHeaders;com.apollographql.cache.normalized.api.FieldKeyGenerator){0§<com.apollographql.apollo3.api.Executable.Data>}[0]
final fun <#A: com.apollographql.apollo3.api/Executable.Data> (com.apollographql.apollo3.api/Executable<#A>).com.apollographql.cache.normalized.api/readDataFromCache(com.apollographql.cache.normalized.api/CacheKey, com.apollographql.apollo3.api/CustomScalarAdapters, com.apollographql.cache.normalized.api/ReadOnlyNormalizedCache, com.apollographql.cache.normalized.api/CacheResolver, com.apollographql.cache.normalized.api/CacheHeaders, com.apollographql.cache.normalized.api/FieldKeyGenerator = ...): #A // com.apollographql.cache.normalized.api/readDataFromCache|readDataFromCache@com.apollographql.apollo3.api.Executable<0:0>(com.apollographql.cache.normalized.api.CacheKey;com.apollographql.apollo3.api.CustomScalarAdapters;com.apollographql.cache.normalized.api.ReadOnlyNormalizedCache;com.apollographql.cache.normalized.api.CacheResolver;com.apollographql.cache.normalized.api.CacheHeaders;com.apollographql.cache.normalized.api.FieldKeyGenerator){0§<com.apollographql.apollo3.api.Executable.Data>}[0]
final fun <#A: com.apollographql.apollo3.api/Executable.Data> (com.apollographql.apollo3.api/Executable<#A>).com.apollographql.cache.normalized.api/readDataFromCacheInternal(com.apollographql.cache.normalized.api/CacheKey, com.apollographql.cache.normalized.api/ReadOnlyNormalizedCache, com.apollographql.cache.normalized.api/ApolloResolver, com.apollographql.cache.normalized.api/CacheHeaders, com.apollographql.apollo3.api/Executable.Variables, com.apollographql.cache.normalized.api/FieldKeyGenerator): com.apollographql.cache.normalized.api/CacheData // com.apollographql.cache.normalized.api/readDataFromCacheInternal|readDataFromCacheInternal@com.apollographql.apollo3.api.Executable<0:0>(com.apollographql.cache.normalized.api.CacheKey;com.apollographql.cache.normalized.api.ReadOnlyNormalizedCache;com.apollographql.cache.normalized.api.ApolloResolver;com.apollographql.cache.normalized.api.CacheHeaders;com.apollographql.apollo3.api.Executable.Variables;com.apollographql.cache.normalized.api.FieldKeyGenerator){0§<com.apollographql.apollo3.api.Executable.Data>}[0]
final fun <#A: com.apollographql.apollo3.api/Executable.Data> (com.apollographql.apollo3.api/Executable<#A>).com.apollographql.cache.normalized.api/readDataFromCacheInternal(com.apollographql.cache.normalized.api/CacheKey, com.apollographql.cache.normalized.api/ReadOnlyNormalizedCache, com.apollographql.cache.normalized.api/CacheResolver, com.apollographql.cache.normalized.api/CacheHeaders, com.apollographql.apollo3.api/Executable.Variables, com.apollographql.cache.normalized.api/FieldKeyGenerator): com.apollographql.cache.normalized.api/CacheData // com.apollographql.cache.normalized.api/readDataFromCacheInternal|readDataFromCacheInternal@com.apollographql.apollo3.api.Executable<0:0>(com.apollographql.cache.normalized.api.CacheKey;com.apollographql.cache.normalized.api.ReadOnlyNormalizedCache;com.apollographql.cache.normalized.api.CacheResolver;com.apollographql.cache.normalized.api.CacheHeaders;com.apollographql.apollo3.api.Executable.Variables;com.apollographql.cache.normalized.api.FieldKeyGenerator){0§<com.apollographql.apollo3.api.Executable.Data>}[0]
final fun <#A: com.apollographql.apollo3.api/Executable.Data> (com.apollographql.cache.normalized.api/CacheData).com.apollographql.cache.normalized.api/toData(com.apollographql.apollo3.api/Adapter<#A>, com.apollographql.apollo3.api/CustomScalarAdapters, com.apollographql.apollo3.api/Executable.Variables): #A // com.apollographql.cache.normalized.api/toData|toData@com.apollographql.cache.normalized.api.CacheData(com.apollographql.apollo3.api.Adapter<0:0>;com.apollographql.apollo3.api.CustomScalarAdapters;com.apollographql.apollo3.api.Executable.Variables){0§<com.apollographql.apollo3.api.Executable.Data>}[0]
final fun <#A: com.apollographql.apollo3.api/Operation.Data> (com.apollographql.apollo3.api/Operation<#A>).com.apollographql.cache.normalized.api/normalize(#A, com.apollographql.apollo3.api/CustomScalarAdapters, com.apollographql.cache.normalized.api/CacheKeyGenerator, com.apollographql.cache.normalized.api/MetadataGenerator = ..., com.apollographql.cache.normalized.api/FieldKeyGenerator = ..., com.apollographql.cache.normalized.api/EmbeddedFieldsProvider = ...): kotlin.collections/Map<kotlin/String, com.apollographql.cache.normalized.api/Record> // com.apollographql.cache.normalized.api/normalize|normalize@com.apollographql.apollo3.api.Operation<0:0>(0:0;com.apollographql.apollo3.api.CustomScalarAdapters;com.apollographql.cache.normalized.api.CacheKeyGenerator;com.apollographql.cache.normalized.api.MetadataGenerator;com.apollographql.cache.normalized.api.FieldKeyGenerator;com.apollographql.cache.normalized.api.EmbeddedFieldsProvider){0§<com.apollographql.apollo3.api.Operation.Data>}[0]
final object com.apollographql.cache.normalized.api.internal/BlobRecordSerializer { // com.apollographql.cache.normalized.api.internal/BlobRecordSerializer|null[0]
    final fun deserialize(kotlin/String, kotlin/ByteArray): com.apollographql.cache.normalized.api/Record // com.apollographql.cache.normalized.api.internal/BlobRecordSerializer.deserialize|deserialize(kotlin.String;kotlin.ByteArray){}[0]
    final fun serialize(com.apollographql.cache.normalized.api/Record): kotlin/ByteArray // com.apollographql.cache.normalized.api.internal/BlobRecordSerializer.serialize|serialize(com.apollographql.cache.normalized.api.Record){}[0]
}
final object com.apollographql.cache.normalized.api.internal/JsonRecordSerializer { // com.apollographql.cache.normalized.api.internal/JsonRecordSerializer|null[0]
    final fun deserialize(kotlin/String, kotlin/String): com.apollographql.cache.normalized.api/Record // com.apollographql.cache.normalized.api.internal/JsonRecordSerializer.deserialize|deserialize(kotlin.String;kotlin.String){}[0]
    final fun serialize(com.apollographql.cache.normalized.api/Record): kotlin/String // com.apollographql.cache.normalized.api.internal/JsonRecordSerializer.serialize|serialize(com.apollographql.cache.normalized.api.Record){}[0]
}
final object com.apollographql.cache.normalized.api/ApolloCacheHeaders { // com.apollographql.cache.normalized.api/ApolloCacheHeaders|null[0]
    final const val DATE // com.apollographql.cache.normalized.api/ApolloCacheHeaders.DATE|{}DATE[0]
        final fun <get-DATE>(): kotlin/String // com.apollographql.cache.normalized.api/ApolloCacheHeaders.DATE.<get-DATE>|<get-DATE>(){}[0]
    final const val DO_NOT_STORE // com.apollographql.cache.normalized.api/ApolloCacheHeaders.DO_NOT_STORE|{}DO_NOT_STORE[0]
        final fun <get-DO_NOT_STORE>(): kotlin/String // com.apollographql.cache.normalized.api/ApolloCacheHeaders.DO_NOT_STORE.<get-DO_NOT_STORE>|<get-DO_NOT_STORE>(){}[0]
    final const val EVICT_AFTER_READ // com.apollographql.cache.normalized.api/ApolloCacheHeaders.EVICT_AFTER_READ|{}EVICT_AFTER_READ[0]
        final fun <get-EVICT_AFTER_READ>(): kotlin/String // com.apollographql.cache.normalized.api/ApolloCacheHeaders.EVICT_AFTER_READ.<get-EVICT_AFTER_READ>|<get-EVICT_AFTER_READ>(){}[0]
    final const val MAX_STALE // com.apollographql.cache.normalized.api/ApolloCacheHeaders.MAX_STALE|{}MAX_STALE[0]
        final fun <get-MAX_STALE>(): kotlin/String // com.apollographql.cache.normalized.api/ApolloCacheHeaders.MAX_STALE.<get-MAX_STALE>|<get-MAX_STALE>(){}[0]
}
final object com.apollographql.cache.normalized.api/DefaultApolloResolver : com.apollographql.cache.normalized.api/ApolloResolver { // com.apollographql.cache.normalized.api/DefaultApolloResolver|null[0]
    final fun resolveField(com.apollographql.cache.normalized.api/ResolverContext): kotlin/Any? // com.apollographql.cache.normalized.api/DefaultApolloResolver.resolveField|resolveField(com.apollographql.cache.normalized.api.ResolverContext){}[0]
}
final object com.apollographql.cache.normalized.api/DefaultCacheResolver : com.apollographql.cache.normalized.api/CacheResolver { // com.apollographql.cache.normalized.api/DefaultCacheResolver|null[0]
    final fun resolveField(com.apollographql.apollo3.api/CompiledField, com.apollographql.apollo3.api/Executable.Variables, kotlin.collections/Map<kotlin/String, kotlin/Any?>, kotlin/String): kotlin/Any? // com.apollographql.cache.normalized.api/DefaultCacheResolver.resolveField|resolveField(com.apollographql.apollo3.api.CompiledField;com.apollographql.apollo3.api.Executable.Variables;kotlin.collections.Map<kotlin.String,kotlin.Any?>;kotlin.String){}[0]
}
final object com.apollographql.cache.normalized.api/DefaultEmbeddedFieldsProvider : com.apollographql.cache.normalized.api/EmbeddedFieldsProvider { // com.apollographql.cache.normalized.api/DefaultEmbeddedFieldsProvider|null[0]
    final fun getEmbeddedFields(com.apollographql.cache.normalized.api/EmbeddedFieldsContext): kotlin.collections/List<kotlin/String> // com.apollographql.cache.normalized.api/DefaultEmbeddedFieldsProvider.getEmbeddedFields|getEmbeddedFields(com.apollographql.cache.normalized.api.EmbeddedFieldsContext){}[0]
}
final object com.apollographql.cache.normalized.api/DefaultFieldKeyGenerator : com.apollographql.cache.normalized.api/FieldKeyGenerator { // com.apollographql.cache.normalized.api/DefaultFieldKeyGenerator|null[0]
    final fun getFieldKey(com.apollographql.cache.normalized.api/FieldKeyContext): kotlin/String // com.apollographql.cache.normalized.api/DefaultFieldKeyGenerator.getFieldKey|getFieldKey(com.apollographql.cache.normalized.api.FieldKeyContext){}[0]
}
final object com.apollographql.cache.normalized.api/DefaultRecordMerger : com.apollographql.cache.normalized.api/RecordMerger { // com.apollographql.cache.normalized.api/DefaultRecordMerger|null[0]
    final fun merge(com.apollographql.cache.normalized.api/Record, com.apollographql.cache.normalized.api/Record, kotlin/Long?): kotlin/Pair<com.apollographql.cache.normalized.api/Record, kotlin.collections/Set<kotlin/String>> // com.apollographql.cache.normalized.api/DefaultRecordMerger.merge|merge(com.apollographql.cache.normalized.api.Record;com.apollographql.cache.normalized.api.Record;kotlin.Long?){}[0]
}
final object com.apollographql.cache.normalized.api/EmptyMetadataGenerator : com.apollographql.cache.normalized.api/MetadataGenerator { // com.apollographql.cache.normalized.api/EmptyMetadataGenerator|null[0]
    final fun metadataForObject(kotlin/Any?, com.apollographql.cache.normalized.api/MetadataGeneratorContext): kotlin.collections/Map<kotlin/String, kotlin/Any?> // com.apollographql.cache.normalized.api/EmptyMetadataGenerator.metadataForObject|metadataForObject(kotlin.Any?;com.apollographql.cache.normalized.api.MetadataGeneratorContext){}[0]
}
final object com.apollographql.cache.normalized.api/FieldPolicyApolloResolver : com.apollographql.cache.normalized.api/ApolloResolver { // com.apollographql.cache.normalized.api/FieldPolicyApolloResolver|null[0]
    final fun resolveField(com.apollographql.cache.normalized.api/ResolverContext): kotlin/Any? // com.apollographql.cache.normalized.api/FieldPolicyApolloResolver.resolveField|resolveField(com.apollographql.cache.normalized.api.ResolverContext){}[0]
}
final object com.apollographql.cache.normalized.api/FieldPolicyCacheResolver : com.apollographql.cache.normalized.api/CacheResolver { // com.apollographql.cache.normalized.api/FieldPolicyCacheResolver|null[0]
    final fun resolveField(com.apollographql.apollo3.api/CompiledField, com.apollographql.apollo3.api/Executable.Variables, kotlin.collections/Map<kotlin/String, kotlin/Any?>, kotlin/String): kotlin/Any? // com.apollographql.cache.normalized.api/FieldPolicyCacheResolver.resolveField|resolveField(com.apollographql.apollo3.api.CompiledField;com.apollographql.apollo3.api.Executable.Variables;kotlin.collections.Map<kotlin.String,kotlin.Any?>;kotlin.String){}[0]
}
final object com.apollographql.cache.normalized.api/TypePolicyCacheKeyGenerator : com.apollographql.cache.normalized.api/CacheKeyGenerator { // com.apollographql.cache.normalized.api/TypePolicyCacheKeyGenerator|null[0]
    final fun cacheKeyForObject(kotlin.collections/Map<kotlin/String, kotlin/Any?>, com.apollographql.cache.normalized.api/CacheKeyGeneratorContext): com.apollographql.cache.normalized.api/CacheKey? // com.apollographql.cache.normalized.api/TypePolicyCacheKeyGenerator.cacheKeyForObject|cacheKeyForObject(kotlin.collections.Map<kotlin.String,kotlin.Any?>;com.apollographql.cache.normalized.api.CacheKeyGeneratorContext){}[0]
}
final val com.apollographql.cache.normalized.api/ConnectionRecordMerger // com.apollographql.cache.normalized.api/ConnectionRecordMerger|{}ConnectionRecordMerger[0]
    final fun <get-ConnectionRecordMerger>(): com.apollographql.cache.normalized.api/FieldRecordMerger // com.apollographql.cache.normalized.api/ConnectionRecordMerger.<get-ConnectionRecordMerger>|<get-ConnectionRecordMerger>(){}[0]
