@file:OptIn(ApolloExperimental::class)

package com.apollographql.cache.apollocompilerplugin.internal

import com.apollographql.apollo.annotations.ApolloExperimental
import com.apollographql.apollo.ast.Schema
import com.apollographql.apollo.compiler.ApolloCompilerPluginEnvironment
import com.apollographql.apollo.compiler.SchemaListener
import com.apollographql.cache.apollocompilerplugin.VERSION
import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.CodeBlock
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.MAP
import com.squareup.kotlinpoet.MemberName
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.STRING
import com.squareup.kotlinpoet.TypeSpec
import com.squareup.kotlinpoet.asTypeName
import com.squareup.kotlinpoet.withIndent
import java.io.File
import kotlin.time.Duration

private object Symbols {
  val MaxAge = ClassName("com.apollographql.cache.normalized.api", "MaxAge")
  val MaxAgeInherit = MaxAge.nestedClass("Inherit")
  val MaxAgeDuration = MaxAge.nestedClass("Duration")
  val Seconds = MemberName(Duration.Companion::class.asTypeName(), "seconds", isExtension = true)
  val TypePolicy = ClassName("com.apollographql.cache.normalized.api", "TypePolicy")
}

internal class CacheSchemaListener(
    private val environment: ApolloCompilerPluginEnvironment,
) : SchemaListener {
  override fun onSchema(schema: Schema, outputDirectory: File) {
    val packageName = (environment.arguments["packageName"] as? String
        ?: throw IllegalArgumentException("packageName argument is required and must be a String")) + ".cache"
    val file = FileSpec.builder(packageName, "Cache")
        .addType(
            TypeSpec.objectBuilder("Cache")
                .addProperty(maxAgeProperty(schema))
                .addProperty(typePoliciesProperty(schema))
                .build()
        )
        .addFileComment(
            """
                
                AUTO-GENERATED FILE. DO NOT MODIFY.
                
                This class was automatically generated by Apollo GraphQL Cache version '$VERSION'.
                
            """.trimIndent()
        )
        .build()
    file.writeTo(outputDirectory)
  }

  private fun maxAgeProperty(schema: Schema): PropertySpec {
    val maxAges = schema.getMaxAges(environment.logger)
    val initializer = CodeBlock.builder().apply {
      add("mapOf(\n")
      withIndent {
        maxAges.forEach { (field, duration) ->
          if (duration == -1) {
            addStatement("%S to %T,", field, Symbols.MaxAgeInherit)
          } else {
            addStatement("%S to %T(%L.%M),", field, Symbols.MaxAgeDuration, duration, Symbols.Seconds)
          }
        }
      }
      add(")")
    }
        .build()
    return PropertySpec.Companion.builder(
        name = "maxAges",
        type = MAP.parameterizedBy(STRING, Symbols.MaxAge)
    )
        .initializer(initializer)
        .build()
  }

  private fun typePoliciesProperty(schema: Schema): PropertySpec {
    val typePolicies = schema.getTypePolicies()
    val initializer = CodeBlock.builder().apply {
      add("mapOf(\n")
      withIndent {
        typePolicies.forEach { (type, typePolicy) ->
          addStatement("%S to %T(", type, Symbols.TypePolicy)
          withIndent {
            addStatement("keyFields = setOf(")
            withIndent {
              typePolicy.keyFields.forEach { keyField ->
                addStatement("%S, ", keyField)
              }
            }
            add("),\n")
          }
          addStatement("),")
        }
      }
      add(")")
    }
        .build()
    return PropertySpec.builder(
        name = "typePolicies",
        type = MAP.parameterizedBy(STRING, Symbols.TypePolicy)
    )
        .initializer(initializer)
        .build()
  }
}
